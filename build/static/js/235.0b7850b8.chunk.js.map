{"version":3,"file":"static/js/235.0b7850b8.chunk.js","mappings":"iIA+FA,IAhFe,SAAC,GAMH,IALTA,EAKQ,EALRA,gBACAC,EAIQ,EAJRA,eAKA,GADQ,EAHRC,YAGQ,EAFRC,YAEQ,EADRC,MAEwBC,EAAAA,EAAAA,UAAS,KAAjC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAqBF,EAAAA,EAAAA,UAAS,IAA9B,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAsBJ,EAAAA,EAAAA,UAAS,IAA/B,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA4BN,EAAAA,EAAAA,UAAS,IAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAA4BR,EAAAA,EAAAA,UAAS,IAArC,eAAOS,EAAP,KAAeC,EAAf,KACA,GAA8BV,EAAAA,EAAAA,UAASJ,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KAEA,GAA0BZ,EAAAA,EAAAA,UAAS,GAAnC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAAsBd,EAAAA,EAAAA,UAAS,GAA/B,eAoDA,MAAO,CACHa,MAAAA,EAAOC,SAAAA,EACPC,IAtDJ,KAsDSC,OAtDT,KAuDIf,SAAAA,EAAUC,IAAAA,EACVC,OAAAA,EAAQC,GAAAA,EACRC,QAAAA,EAASC,GAAAA,EACTC,OAAAA,EAAQC,UAAAA,EACRC,OAAAA,EAAQC,UAAAA,EACRC,QAAAA,EAASC,WAAAA,EACTK,QA3DWC,EAAAA,EAAAA,GAAO,MAAO,MAAOvB,GA6DvC,C,0KC7EOwB,EAAcC,EAAAA,EAAAA,IAATC,EAASD,EAAAA,EAAAA,KAEf,SAASE,EAAaC,EAAkBC,EAAaC,GACxD,MAAO,CACHC,WAAYH,EAAKI,UAAUC,UAAUC,OACrCC,WAAYP,EAAKI,UAAUC,UAAUG,OACrCC,YAAYC,EAAAA,EAAAA,IAAiBV,EAAKI,UAAUC,UAAUM,aACtDC,iBAAkBZ,EAAKI,UAAUC,UAAUQ,cAC3CC,iBAAkBd,EAAKI,UAAUC,UAAUU,cAC3CC,QAAShB,EAAKiB,UAAUC,UACxBC,KAAMnB,EAAKiB,UAAUG,WACrBC,WAAYrB,EAAKiB,UAAUK,YAC3BC,SAASC,EAAAA,EAAAA,IAAQxB,EAAKyB,aACtBC,kBAAkBC,EAAAA,EAAAA,IAAc3B,EAAKI,UAAUC,UAAU7B,MACzDyB,IAAI,GAAD,OAAKA,EAAL,cACH2B,WAAY1B,EAEnB,CAEM,SAAS2B,EAAaC,EAAgB7B,EAAaC,EAAkB6B,GACxE,MAAO,CACHC,mBAAoB,EACpBJ,WAAY1B,EACZwB,iBAAkB,EAClBO,kBAAmBF,EACnBG,YAAa,GACb3B,WAAYuB,EAAIK,mBAAmB3B,OACnCC,YAAYC,EAAAA,EAAAA,IAAiBoB,EAAIK,mBAAmBxB,aACpDyB,QAASN,EAAIO,WAAWlB,KACxBlB,IAAI,GAAD,OAAKA,EAAL,cACHqC,SAAU,8OAEjB,CAEM,SAASC,EAAQT,EAAgBU,EAAYvC,EAAaC,EAAkB6B,GAC/E,IAAMU,GAAaC,EAAAA,EAAAA,IAAaF,EAAKG,YACrC,MAAO,CACHC,WAAWC,EAAAA,EAAAA,IAAYf,EAAIO,WAAWS,QACtCL,WAAYA,EACZM,KAAMP,EAAKQ,OACXC,YAAY,GAAD,OAAKT,EAAKU,KAAV,UACXtB,WAAY1B,EACZwB,iBAAkB,EAClBO,kBAAmBF,EACnBtB,WAAW,GAAD,OAAK+B,EAAKU,KAAV,UACVhB,YAAa,GACbE,QAASN,EAAIO,WAAWlB,KACxBlB,IAAI,GAAD,OAAKA,EAAL,0BAA0BwC,GAC7BH,SAAU,4EAEjB,UAEca,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,C,aAAf,O,0BAAA,WAA2BC,EAAqBvE,EAASwE,EAAiBC,GAA1E,6JAEsCC,EAAAA,EAAAA,IAAkBD,EAAQA,EAAOE,OAFvE,mBAEYtD,EAFZ,EAEYA,SAAUsD,EAFtB,EAEsBA,MAElB3E,EAAG,kCAAD,OAAU2E,IACZC,QAAQC,IAAR,yCAAqBF,IACfvD,EAAMmD,EAASO,YAAYC,KAAKC,mBACtChF,EAAG,YAAD,OAAaoB,IAET6D,EAAoB,IAEtB5D,EAXR,wBAaQoD,EAAOS,MAAQ7D,EACX8D,GAAS,EAdrB,UAgB4BpE,EAAG,wBAA0BM,EAA1B,WAhB/B,eAgBc+D,EAhBd,OAiBQX,EAAOY,kBAAmB,EAEtBD,EAAME,OACNb,EAAOY,iBAAmBD,EAAMjE,KAAKoE,UAGzCvF,EAAG,kHAAD,OAA8BqB,IAE5BmE,EAAmB,CACnBC,SAAU,CAAEC,OAAO,EAAOC,GAAI,GAC9BC,SAAU,CAAEF,OAAO,EAAOC,GAAI,EAAGE,MAAO,GACxCC,IAAK,GACLC,QAAS,CAAC,GAGRC,EAAW,SAACC,GACd,IAAMC,EAAUD,EAAIpD,iBAapB,OAXgB,IAAZqD,GAA6B,KAAZA,GACZzB,EAAO0B,iBAAkBF,EAAIG,UAC9BxB,QAAQC,IAAI,mFACZ7E,EAAG,uFAAD,OAAuBiG,EAAIN,KAC7BH,EAAMC,SAASE,GAAKM,EAAIN,GACxBH,EAAMC,SAASC,OAAQ,EACvBjB,EAAO4B,UAAYJ,EAAI3E,YAAc,GACrCmD,EAAO6B,UAAYL,EAAIvE,YAAc,GACrC+C,EAAO0B,eAAkB1B,EAAO4B,YAAc5B,EAAO8B,aAAe9B,EAAO6B,YAAc7B,EAAO+B,aAGhGN,GACJ,KAAK,IACD,GAAyB,OAArBD,EAAIQ,aAAuB,CAC3BtB,GAAS,EACT,IAAMO,EAAQgB,OAAOC,OAAOnB,EAAMO,QAASE,EAAIQ,cAC/C7B,QAAQC,IAAIoB,EAAIQ,aAAcR,EAAI/B,KAAM+B,EAAIN,IAC5C3F,EAAG,4DAAD,OAAgBiG,EAAIQ,aAApB,aAAqCR,EAAI/B,OAC3Ce,EAAO2B,KAAK,CAAEjB,GAAIM,EAAIN,GAAIrD,KAAM2D,EAAIQ,aAAcI,OAAQZ,EAAI/B,MAAQ,EAAGnE,QAAQ,IACjFyF,EAAMM,IAAIc,KAAKX,EAAIQ,gBACdf,GAAUA,GAASO,EAAIG,WACxBZ,EAAMO,QAAQE,EAAIQ,cAAgB,CAAEd,GAAIM,EAAIN,GAAIkB,OAAQZ,EAAI/B,MAEnE,CACD,MACJ,KAAK,EACL,KAAK,EACL,KAAK,GACIO,EAAOqC,iBAAkBb,EAAIG,UAC9BxB,QAAQC,IAAI,mIAA2BoB,EAAIN,IAC3C3F,EAAG,qIAAD,OAA6BiG,EAAIN,KACnCH,EAAMI,SAASD,GAAKM,EAAIN,GACxBH,EAAMI,SAASC,OAAS,EACxBL,EAAMI,SAASF,OAAQ,EACvBjB,EAAOsC,mBAAqBd,EAAIvE,YAAc,GAC9C+C,EAAOqC,eAAkBrC,EAAOuC,uBAAyBvC,EAAOsC,oBACxDtC,EAAOuC,uBAAyBf,EAAI3E,WAAamD,EAAOsC,oBAI/E,EA3ET,UA6EkChG,EAAG,wBAA4BM,EAA5B,0CA7ErC,aA6Ec4F,EA7Ed,QA8EwB3B,KA9ExB,oBA+E4C,IAA5B2B,EAAY9F,KAAK+F,OA/EjC,qBAgFgBC,EAAAA,EAAAA,IAAO1C,EAAQ,iBAAkB,oFAE7BD,EAAO4C,QAlF3B,wBAmFoBxC,QAAQC,IAAI,iHACRwC,GAAWC,EAAAA,EAAAA,GAASpG,EAAaqD,EAASgD,WAAYnG,EAAKC,IApFnF,WAqF8CmG,EAAAA,EAAAA,IAAS,uBAAwBH,GArF/E,QAqFoB7B,EAAMC,SAASE,GArFnC,OAsFoBH,EAAMC,SAASC,MAAQ+B,QAAQjC,EAAMC,SAASE,IAtFlE,gCA0FgB,UAAAsB,EAAY9F,KAAK,UAAjB,mBAAqBuG,YAArB,SAA2BC,QAAQ3B,IAE9BvB,EAAO0B,gBAAkB5B,EAASgD,WAAWhG,UAAUqG,uBACxDnD,EAAOoD,eAAiB,mFAClBC,EAAevD,EAASgD,WAAWhG,UAAUuG,aACnDrD,EAAO+B,YAAP,OAAqBsB,QAArB,IAAqBA,OAArB,EAAqBA,EAAcnG,OACnC8C,EAAO8B,YAAP,OAAqBuB,QAArB,IAAqBA,OAArB,EAAqBA,EAAcrG,OACnC+D,EAAMC,SAASC,OAAQ,EACvB,UAAAuB,EAAY9F,KAAK,UAAjB,mBAAqBuG,YAArB,SAA2BC,QAAQ3B,IAlGvD,yBAuG8BjF,EAAG,wBAA4BM,EAA5B,6CAvGjC,aAuGc0G,EAvGd,QAwGoBzC,KAxGpB,oBA0GwC,IAAxByC,EAAQ5G,KAAK+F,QACbC,EAAAA,EAAAA,IAAO1C,EAAQ,iBAAkB,oHAEjC,UAAAsD,EAAQ5G,KAAK,UAAb,mBAAiBuG,YAAjB,SAAuBC,QAAQ3B,GAG9BR,EAAMI,SAASF,QAASlB,EAAO4C,QAhHhD,wBAiHgBxC,QAAQC,IAAI,uHACRwC,GAAWC,EAAAA,EAAAA,GAAStE,EAAauB,EAASyD,UAAW5G,EAAKC,EAAUmE,EAAMC,SAASE,KAlHvG,WAmH0C6B,EAAAA,EAAAA,IAAS,gBAAiBH,GAnHpE,QAmHgB7B,EAAMI,SAASD,GAnH/B,OAoHgBH,EAAMI,SAASF,MAAQ+B,QAAQjC,EAAMI,SAASD,IApH9D,YAuHgBnB,EAAO4C,SAAajC,KAAUK,EAAMM,IAAIoB,OAAS3C,EAAS0D,MAAMA,MAAMf,QAvHtF,iBAwHgBtC,QAAQC,IAAI,6DAxH5B,UAyHmCN,EAAS0D,MAAMA,OAzHlD,8DAyH2BtE,EAzH3B,QA0HyB6B,EAAMM,IAAIoC,SAASvE,EAAKG,YA1HjD,wBA2HwBc,QAAQC,IAAI,+DAAclB,EAAKG,YAC3BuD,GAAWC,EAAAA,EAAAA,GAAS5D,EAAQa,EAASyD,UAAWrE,EAAMvC,EAAKC,EAAWmE,EAAMC,SAASE,KA5HjH,WA6H6C6B,EAAAA,EAAAA,IAAS,gBAAiBH,GA7HvE,QA6H8Bc,EA7H9B,OA8HwB3C,EAAMO,QAAQpC,EAAKG,YAAc,CAAE6B,GAAIwC,EAAQtB,OAAQlD,EAAKQ,QA9HpF,6JAmIgBqB,EAAMI,SAASF,MAnI/B,oBAqIqBjB,EAAOY,iBArI5B,sBAsIwB,UAAAb,EAAO4D,cAAP,SAAeF,SAAS,SAAYzD,EAAO0B,gBAAkB1B,EAAOqC,gBAtI5F,kCAuI8BuB,EAAYhH,EAAUmE,EAAMI,SAASD,GAAIpB,EAAUE,GAvIjF,gCA0IoBG,QAAQC,IAAI,qDA1IhC,yBAiJcyD,EAAW,CAAEjH,SAAAA,EAAUD,IAAAA,EAAKmH,YAAa/C,EAAMI,SAASD,IAC1DpB,EAASiE,aAAaA,aAAcxI,EAAIwF,EAAMO,QAASvB,EAAQC,EAAQF,GAlJnF,qCAoJeC,EAAOiE,aApJtB,qBAsJQ7D,QAAQC,IAAI,8GAEiD,IAAzDN,EAASgD,WAAWhG,UAAUC,UAAUkH,MAAMxB,OAxJ1D,yBA0JoB5E,EAA8BmC,EAA9BnC,KAAMH,EAAwBsC,EAAxBtC,QAASK,EAAeiC,EAAfjC,WACjBmG,EAAS,CAAErG,KAAAA,EAAMH,QAAAA,EAASK,WAAAA,GA3J5C,UA6J8BvB,EAAiB,sBAAuB0H,GA7JtE,aA6JkBC,EA7JlB,QA+JoBtD,KA/JpB,yBAgKsBK,EAAKiD,EAAIzH,KAAKwE,GAEpB3F,EAAG,wHAAD,OAA+B2F,IACjCf,QAAQC,IAAR,+HAA0Cc,IAnK1D,WAqKqC1E,EAAI,wBAA8B0E,EAA9B,gCAAkDgD,GAAlD,IAA0DhD,GAAAA,KArKnG,cAqKsBkD,EArKtB,QAuK2BvD,KAvK3B,yBAwKoBtF,EAAG,6GAxKvB,WAyK0BsE,EAAYC,EAAUvE,EAAIwE,EAAQC,GAzK5D,mCA2KoBG,QAAQC,IAAIgE,EAAOC,SA3KvC,oCAkLQ3B,EAAAA,EAAAA,IAAO1C,EAAQ,kBAAmB,gNAlL1C,kGAwLe4D,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAf,WAA2BhH,EAAkBkH,EAAqBQ,EAAiBtE,GAAnF,mFAEUM,EAAOgE,EAAKjE,YAAYC,MAKrBiE,iBAPb,gCAQ0B/H,EAAK,iBAAD,OAAkBI,EAAlB,gCAA0D,CAC5E4H,YAAaV,EACbW,cAAenE,EAAKoE,6BAA+B,8BAV/D,OAQcP,EARd,OAaQnE,EAAOY,iBAAoBuD,EAAItD,KAbvC,kEAqBO,IAUD8D,EAAqB,GAA3B,SAEeC,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAf,WAAyBC,EAAoBC,EACzCC,EAAoBxJ,EAASyJ,EAAmBjF,EAAiBC,GADrE,6GAGYkB,EAAO2D,EAAP3D,GACF+D,EAAYJ,EAAKK,QAAQC,MAAM,EAAG,IACxC5J,EAAG,0DAAD,OAAc0J,IAEhBjF,EAAOoF,QAAUP,EAAKQ,UAAY,EAClCrF,EAAOsF,QAAUpE,EACjBlB,EAAOuF,UAAYN,EAAY,KAEzBO,EAAU,CAAEtE,GAAAA,EAAIrD,KAAMoH,IACpBQ,OAAS,GACjBD,EAAQE,KAAO,IAEXf,EAASlB,SAASwB,EAAUE,MAAM,EAAG,IAf7C,iBAgBQhF,QAAQC,IAAI,YAAa6E,GACzBO,EAAQC,OAAOtD,KAAK,8LAjB5B,4BAoB6BpC,EAAO4F,aApBpC,kCAwB8BrJ,EAAG,4BAA8B4E,EAA9B,gBAxBjC,aAwBkBiD,EAxBlB,QA0BoBtD,KA1BpB,2BA4BiCsD,EAAIzH,MA5BrC,8DA8BqD,KAF1BkJ,EA5B3B,SA8B2BC,sBA9B3B,oBAgC6BD,EAAGE,kBAhChC,uBAkC8C7D,OAAO8D,KAAKf,GAlC1D,6CAkCuC3D,EAlCvC,KAoCwD,IAApB2D,EAAQ3D,GAAKH,IACbsE,EAAQC,OAAOtD,KAAK,SAAWyD,EAAG5D,eAGlCX,EAAIoC,SAASmC,EAAG5D,cAxCpD,wBA0CoC7B,QAAQC,IAAI,sGAAuBwF,EAAG5D,aAAcgD,EAAQ3D,IA1ChG,UA4CoD7E,EAAK,qBAAD,OAAsB0E,EAAtB,cAAsC,CAEtD8E,iBAAkBJ,EAAG1E,GACrB+E,aAAcjB,EAAQ3D,GAAKe,OAC3BzF,IAAK,KACL6H,YAAaQ,EAAQ3D,GAAKH,GAC1BgF,cAAe,4EACfC,iBAAkB,IAnD1D,eAuD4CtF,OACJV,QAAQC,IAAI,yDAAaiB,GACzBmE,EAAQE,KAAKvD,KAAb,oFAAmCd,KAzD3E,wBA8DoCmE,EAAQC,OAAOtD,KAAK,4GAAyByD,EAAG5D,cA9DpF,iLAsEoBjC,EAAO4F,aAtE3B,mCAwEsCS,EAAAA,EAAAA,IAAclF,EAAI,iBAAkB,CAClDgE,QAAS,iOACTmB,iBAAkB,KA1E1C,SAwE0BlC,EAxE1B,QA4E4BtD,MACJV,QAAQC,IAAI+D,EAAIE,QAAS,4DA7EjD,qBAkFYtE,EAAOuG,gBAlFnB,QAkFY,EAAiB7C,SAAS,QAlFtC,kCAoF8BnH,EAAG,4BAA6B4E,EAA7B,gBApFjC,aAoFkBiD,EApFlB,QAqFoBtD,KArFpB,qBAuFoB0F,EAAczB,EAAM0B,QAAO,SAACC,EAAKC,GAEjC,OADAD,GAAOC,EAAIhH,MAEd,GAAE,IAEe,KACd6G,EAAc,IAGdpC,EAAIzH,KAAKiK,mBAAqBJ,EAhGlD,iBAiGoBpG,QAAQC,IAAI,uGACZoF,EAAQoB,UAAY,KAlGxC,6BAmG2BzC,EAAIzH,KAAKiK,iBAAmBJ,GAnGvD,iBAoG0BjL,EApG1B,8KAoGwE6I,EAAIzH,KAAKiK,iBApGjF,YAoGqGJ,GACjFpG,QAAQC,IAAI9E,GACZkK,EAAQoB,UAAYtL,EAtGxC,2BAuG2B6I,EAAIzH,KAAKiK,mBAAqBJ,IAAexG,EAAO4C,QAvG/E,wBAwGoBxC,QAAQC,IAAI,mHAA0B+D,EAAIzH,KAAKiK,iBAAkBJ,GAEjEhL,EAAG,kIA1GvB,UA4GyCiB,EAAI,4BAGA0E,EAHA,qBAGuB,CAC5CsD,YAAaO,EAAIjB,YACjB+C,YAAa,GACbhJ,KAAM,yLACN4B,KAAM8G,EAAcpC,EAAIzH,KAAKiK,iBAC7BhK,IAAI,GAAD,OAAKoI,EAAIpI,IAAT,+BAAmCuE,GACtC4F,eAAgB,OArHxC,SA4G0BC,EA5G1B,QAwH+BlG,OACPV,QAAQC,IAAI2G,EAAO1C,SACnBmB,EAAQE,KAAKvD,KAAK,wEA1H1C,QA+HgBqD,EAAQwB,SAAW7C,EAAIzH,KAAKuK,UAAY9C,EAAIzH,KAAKiK,iBAEjD3G,EAAOkH,cAAgBX,EACvBvG,EAAOmH,YAAchD,EAAIzH,KAAKiK,iBAC9B3G,EAAOoH,YAAcjD,EAAIzH,KAAKuK,UAC9BjH,EAAOqH,cAAgB7B,EAAQwB,SApI/C,iGA2IeM,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAf,WAAwBpG,EAAYlB,EAAkBuH,GAAtD,iFAC0B,wBAAlBA,EADR,uBAEQvH,EAAOwH,UAAY,kHAF3B,SAGkClL,EAAG,4BAA+B4E,EAA/B,UAHrC,QAGcuG,EAHd,QAIwB5G,MAEQ,KAAb,QADD6G,EAAMD,EAAY/K,KAAKiL,gBACtB,IAAHD,OAAA,EAAAA,EAAKjF,SACL,OAAIiF,QAAJ,IAAIA,GAAAA,EAAM,KACN1H,EAAOwH,UAAYE,EAAI,GAAGE,cAR9C,2EAeeC,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAf,WAA0B3G,EAAYlB,EAAkB8H,EAA0B/H,GAAlF,oGACyBzD,EAAG,4BAAwD4E,EAAxD,iBAD5B,YACU6G,EADV,QAGelH,KAHf,oBAIQb,EAAOgI,UAAYhF,QAAQ+E,EAAOrL,KAAKuL,QAElCjI,EAAOgI,WAAR,UAAqBjI,EAAO4D,cAA5B,QAAqB,EAAeF,SAAS,aANzD,iCAQkCnH,EAAG,4BAAoC4E,EAApC,UARrC,YAQkBgH,EARlB,QASwBrH,KATxB,wBAWsBsH,EAAWD,EAAQxL,MAChBuL,QAAS,EAClBE,EAASC,YAAcN,GAAY,4BAbnD,UAcsCtL,EAAK,qBAAD,OAAsB0E,EAAtB,cAAsCiH,GAdhF,QAcsBE,EAdtB,QAegB3F,EAAAA,EAAAA,IAAO1C,EAAQ,gBAAT,2DAAuCqI,EAAQxH,KAAQ,GAAK,gBAA5D,wEACNb,EAAOgI,UAAYK,EAAQxH,KAhB3C,mEA4BA,SAASyH,EAAYtI,EAAkBuI,GAAmF,IAAD,IAErH,GADAvI,EAAOwI,OAAS,SACmB,aAA/BD,EAAiBE,UACjBzI,EAAOwI,OAAS,cAEhB,OAAQD,EAAiBG,qBACrB,IAAK,mBACD1I,EAAOwI,OAAS,SAChB,MACJ,IAAK,kBACDxI,EAAOwI,OAAS,SAChB,MACJ,IAAK,mBACDxI,EAAOwI,OAAS,SAChB,MACJ,IAAK,gBACDxI,EAAOwI,OAAS,SAI5B,MAAO,EAAC,UAAAD,EAAiBI,yBAAjB,mBAAoCC,aAApC,eAA2CzD,MAAM,EAAG,IAApD,YAA8DnF,EAAOwI,OAArE,KAAgFD,EAAiBG,oBAC5G,CAEM,SAAe7E,EAAtB,2DAAO,OAAP,0BAAO,WAA0BkB,EAAoBD,EAAsBvJ,EACvEyJ,EAAmBjF,EAAiBC,EAAkBsE,GADnD,2GAEHnE,QAAQ0I,MAAM,2GAFX,EAI4BP,EAAYtI,EAAQsE,EAAMjE,YAAY2H,UAAUO,kBAJ5E,eAIIO,EAJJ,KAIeC,EAJf,cAKezM,EAAG,wBAA2ByI,EAAInI,SAA/B,kBALlB,YAKGuH,EALH,QAOKtD,KAPL,2BASoBsD,EAAIzH,MATxB,4DASYmI,EATZ,SAUS9E,EAAOiJ,WAAYvF,SAASoB,EAAKoE,aAV1C,qBAWapE,EAAKK,QAAQzB,SAASqF,GAXnC,wBAaa3I,QAAQ0I,MAAM,yDAAaC,GAbxC,UAcmBI,QAAQC,IAAI,CACd7B,EAASzC,EAAK3D,GAAIlB,EAAQ+I,GAC1BlB,EAAWhD,EAAK3D,GAAIlB,EAAV,OAAkBsE,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAMjE,YAAYC,KAAKoE,4BAA6B3E,GAChF6E,EAAUC,EAAMC,EAAOC,EAAKxJ,EAAIyJ,EAASjF,EAAQC,KAjBlE,QAmBaG,QAAQiJ,WAnBrB,yNA8BgBC,EA9BhB,QAgCab,EAAS,SAEc,aAAvBa,EAASZ,UACTD,EAAS,SAE4B,qBAAjCa,EAASX,sBACTF,EAAS,UAIXc,GAAUC,EAAAA,EAAAA,IAAY,GAAD,OAAIF,EAASG,eAAb,aAAgChB,EAAhC,MA1CpC,UA4CehM,EAAK,wBAAyB,CAChC,qBAAwB8M,EACxB,WAAc,MACd,KAAQ,CACJ,CACI,cAAiB,8NACjB,GAAM,MACN,cAAiB,SACjB,UAAa,8NACb,KAAQ,UAEZ,CACI,cAAiB,8OACjB,GAAM,OACN,cAAiB,OACjB,UAAa,8OACb,KAAQ,SAGhB,aAAgB,GAChB,WAAc,IACd,kBAAqB,4BACrB,IAAO,KACP,OAAU,KACV,SAAY,EACZ,wBAA0B,EAC1B,YAAc,EACd,aAAgB,KAChB,OAAU,KACV,YAAe,KACf,aAAe,EACf,oBAAsB,EACtB,uBAA0B,OA5EvC,iJAkFHnJ,QAAQiJ,WAlFL,qGAqFP,SAASK,EAAUzJ,EAAkBD,GAAkB,IAAD,EAC9C,UAACA,EAAOuG,gBAAR,OAAC,EAAiB7C,SAAS,iBACpBzD,EAAOkH,qBACPlH,EAAOmH,mBACPnH,EAAOoH,mBACPpH,EAAOqH,cAErB,CAEM,SAASqC,EAAY3J,GACxB,IAAM4J,EAAU,CACZlJ,MAAO,kBACP2E,QAAS,2BACTwE,MAAO,6CACPjM,UAAW,qBACXkM,KAAM,2BACN3J,MAAO,iCACPxC,QAAS,6CACTG,KAAM,qBACNE,WAAY,mDACZ6D,UAAW,8CACXC,UAAW,8CACXC,YAAa,0DACbC,YAAa,0DACbL,eAAgB,0GAChBa,qBAAsB,sEACtBD,mBAAoB,gEACpBD,eAAgB,oGAChBzB,iBAAkB,gEAClB0E,QAAS,4DACTC,UAAW,eACXiD,OAAQ,6CACRR,UAAW,gEACX8B,eAAgB,sEAChBC,eAAgB,gEAChBvC,UAAW,sEACXN,cAAe,uEACfC,YAAa,2DACbC,YAAa,kCACbC,cAAe,8CACf2C,cAAe,sEACfC,WAAY,wFACZC,UAAW,yDACXC,kBAAmB,sEACnBC,gBAAiB,sGACjBhH,eAAgB,wFAChBiH,eAAgB,yFAGpB,OADAZ,EAAUE,EAAS5J,GACZ,CAAE,EAAG4J,EACf,CAEcW,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,KAAAA,MAAf,WAAoBhG,EAAiBjJ,EAAUE,EAASwE,GAAxD,qHAyCI0J,EAvCMzJ,EAAmB,CACrBS,OAAQ,EACR2E,SAAU,EACVwE,OAAO,UAAAtF,EAAKxB,WAAWyH,eAAhB,eAAyBX,QAAS,GACzCjM,UAAW,GACXkM,KAAMvF,EAAKjE,YAAYnD,OACvBgD,OAAO,UAAAoE,EAAKxB,WAAWhG,UAAUoD,aAA1B,mBAAiChD,cAAjC,eAAyCsN,SAAU,GAC1D9M,QAAS4G,EAAKxB,WAAWnF,UAAUC,UAAU4M,OAC7C3M,KAAMyG,EAAKxB,WAAWnF,UAAUG,WAAW0M,OAC3CzM,YAAY,UAAAuG,EAAKxB,WAAWnF,UAAUK,mBAA1B,eAAuCwM,SAAU,GAC7D5I,UAAW,GACXC,UAAW,GACXC,aAAa,UAAAwC,EAAKxB,WAAWhG,UAAUC,UAAUC,cAApC,eAA4CwN,SAAU,GACnEzI,aAAa,UAAAuC,EAAKxB,WAAWhG,UAAUC,UAAUG,cAApC,eAA4CsN,SAAU,GACnE9I,gBAAgB,EAChBa,sBAAsB,UAAA+B,EAAKf,iBAAL,mBAAgB1E,0BAAhB,mBAAoC3B,cAApC,eAA4CsN,SAAU,GAC5ElI,mBAAoB,GACpBD,gBAAgB,EAChBzB,kBAAkB,EAClB0E,SAAU,EACVC,UAAW,GACXiD,OAAQ,UACRR,UAAW,UACX8B,eAAgB,GAChBC,eAAgB,GAChBvC,UAAW,GACXN,eAAgB,EAChBC,aAAc,EACdC,aAAc,EACdC,eAAgB,EAChB2C,cAAe,GACfC,WAAY,GACZC,UAAW,GACXC,kBAAmB,GACnBC,gBAAiB,GACjBhH,eAAgB,GAChBiH,eAAgB,IAGFtK,GAGZ3E,EA5CV,UA4CwB4E,EAAOtC,QA5C/B,YA4C0CsC,EAAOnC,KA5CjD,YA4CyDmC,EAAOjC,YAC5D1C,EAAID,GACJ4E,EAAOrC,UAAYvC,EAEbmM,EAhDV,UAgD0BjD,EAAKjE,YAAY2H,iBAhD3C,iBAgD0B,EAA4BO,wBAhDtD,aAgD0B,EAA8CG,oBACpE1I,EAAO8J,eAAiBvC,EACxBvH,EAAO+J,eAAP,UAAwBzF,EAAKjE,YAAY2H,iBAAzC,iBAAwB,EAA4BO,wBAApD,aAAwB,EAA8CE,UAlD1E,UAoDQ1I,EAAO0K,sBApDf,QAoDQ,EAAuBhH,SAAS8D,GApDxC,sBAsDaxH,EAAO2K,SAAP,UAAkBpG,EAAKP,oBAAvB,OAAkB,EAAmB4G,uBAA0B5K,EAAO2K,SAtDnF,oBAwDYvK,QAAQ0I,MAAMzN,GACd+E,QAAQC,IAAIkE,EAAKjE,YAAYnD,SAEzBoH,EAAKjE,YAAY2H,UAAUO,iBA3D3C,kCA4DsB1I,EAAYyE,EAAM/I,EAAIwE,EAAQC,GA5DpD,iCA8DgB0C,EAAAA,EAAAA,IAAO1C,EAAQ,aAAc,SA9D7C,QAgEYG,QAAQiJ,WAhEpB,yBAmEY1G,EAAAA,EAAAA,IAAO1C,EAAQ,oBAAqB,yEAnEhD,yDAwEW,EAAC,UAAAsE,EAAKjE,mBAAL,mBAAkBC,YAAlB,eAAwBC,qBAAsBqK,KAAKC,MAAO7K,IAxEtE,mEA4EA,MA9EC,SAEcsK,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,E,2CCxmBTQ,EAAyB,CAC3BC,MAAO,EACPL,SAAS,EACT/E,cAAc,EACd3B,cAAc,EACdrB,SAAS,EACTqG,WAAY,CAAC,kBACb1C,SAAU,CAAC,YAAa,YACxB3C,OAAQ,CAAC,YAAa,QACtB8G,eAAgB,CACZ,sBACA,sBACA,mBACA,mBACA,oBAgKR,EA5J0B,WAEtB,OAA4BtP,EAAAA,EAAAA,UAAS2P,GAArC,eAAO/K,EAAP,KAAeiL,EAAf,KAEA,GAUIC,EAAAA,EAAAA,GAAO,CACPlQ,gBAAgB,EAChBD,iBAAiB,EACjBE,YAAa0O,EACbxO,KAAM,QACND,YAAaqP,IAdblP,EADJ,EACIA,SAAUC,EADd,EACcA,IACVC,EAFJ,EAEIA,OAAQC,EAFZ,EAEYA,GACRC,EAHJ,EAGIA,QAASC,EAHb,EAGaA,GACTC,EAJJ,EAIIA,OAAQC,EAJZ,EAIYA,UACRC,EALJ,EAKIA,OAAQC,EALZ,EAKYA,UACRC,EANJ,EAMIA,QAASC,EANb,EAMaA,WACTK,EAPJ,EAOIA,OACAJ,EARJ,EAQIA,MAAOC,EARX,EAQWA,SACPC,EATJ,EASIA,IAAKC,EATT,EASSA,OAST,GAAgChB,EAAAA,EAAAA,UAAS,IAAzC,eAAO+P,EAAP,KAAiBC,EAAjB,KAEA,GAAkChQ,EAAAA,EAAAA,UAAsB,IAAxD,eAAOiQ,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAMH,EAAU3I,OACjB8I,IACDnP,EAAOoP,SACP/P,EAAG,IACHJ,EAAI,IACJE,EAAG,KAEPY,EAAOoP,EACV,GAAE,CAACH,EAAWhP,EAAQX,EAAIF,EAAIF,EAAKc,IAEpC,IAaMsP,EAAW,SAACC,EAAwCnQ,GACtDmQ,EAAEC,iBACFvP,EAAOwP,SACP,IAAMC,EAAMT,EAAU3I,OAClBqJ,EAASJ,EAAEK,OAAOC,MACtB7L,QAAQC,IAAI0L,GACZ,IAAM1J,EAAS6J,OAAOH,GAGtBvQ,EAFqB6G,EAAS,EAAK,EAAKA,EAASyJ,EAAOA,EAAMzJ,EAGjE,EAEK8J,GAAaC,EAAAA,EAAAA,cAAW,uBAAC,yGAC3B1Q,EAAG,IACHW,EAAOgQ,UACPhQ,EAAOoP,SAEDa,EAAO3C,EAAY3J,GAEnBuM,GAASC,EAAAA,EAAAA,IAAcrB,EAAW,UAAWpP,EAASF,GAEtD4Q,EAAQpB,EAAUjG,MAAMnJ,EAAQ,EAAGE,GACnCuQ,EAAQD,EAAM/J,OACdiK,GAAeC,EAAAA,EAAAA,IAAiBH,EAAO5Q,GAEzCgR,EAAIhR,EAbmB,UAeR8Q,GAfQ,8HAehBpI,EAfgB,QAiBnBsI,EAAIH,IAASG,EAAIH,GACrBhR,EAAG,GAAD,OAAIoR,KAAKC,MAAMF,EAAIH,EAAQ,KAAS,IAApC,cAA6CG,EAA7C,YAAkDH,EAAlD,MAEIM,EAA+B,GACrCzI,EAAKpB,SAAQ,SAAA8J,GAAG,OAAID,EAAU5K,KAAKmI,EAAK0C,EAAK3R,EAAKE,EAAIwE,GAAtC,IArBO,SAsBjBmJ,QAAQC,IAAI4D,GAAWE,MAAK,SAAAC,GAAS,OAAIA,EAAUhK,SAAQ,+BAAEvG,EAAF,KAAOyD,EAAP,YAAgBiM,EAAK1P,GAAOyD,CAA5B,GAAtB,IAtBpB,OAuBnBwM,EAAIlR,IAAW,GAAKU,EAAO+Q,OAAOb,EAAOM,EAAGP,IAChDO,GAAKhR,EAxBkB,gRA4B3BQ,EAAO+Q,OAAOb,EAAOG,EAAOJ,GAAM,IAClCjQ,EAAOwP,SA7BoB,iEA+B5B,CAACR,EAAWhP,EAAQJ,EAAOE,EAAK6D,EAAQnE,EAAQF,EAAQI,EAASoP,EAChEzP,EAAIF,EAAIF,IAEN+R,EAAY,SAACC,GACf,IAAMC,EAAuBC,KAAKC,MAAMH,GACxChC,GAAa,SAAAoC,GAAI,wBAAQH,EAAUI,OAAOtC,YAAzB,OAAuCqC,GAAvC,GACpB,EAEKE,EAAe,SAACjC,GAClB,IAAMkC,EAAMlC,EAAEK,OAAO7K,GACrB8J,GAAU,SAAAyC,GAAI,yBAAUA,GAAV,cAAiBG,GAAO7N,EAAO6N,IAA/B,GACjB,EAOD,OACI,iBAAKC,UAAU,OAAf,WACI,kBAAO3M,GAAG,SAAShG,KAAK,OAAO4S,UAAQ,EAACC,OAAO,mBAAmBC,SA5EnD,SAACC,GAAD,OAAgDC,EAAAA,EAAAA,IAAUD,EAAO,CACpFE,QAAS,SAACC,GACNjD,EAAYiD,EACf,EACD5R,KAAM,WACFJ,EAAOwP,SACP3P,EAAS,GACTE,EAAO,EACV,EACD8Q,KAAMG,EACNiB,MAAO,kBAAMhD,EAAa,GAAnB,GAVY,KA6Ef,mBAAOwC,UAAU,OAAjB,qBAA0B,kBACtB3S,KAAK,SACLgG,GAAG,QACH8K,MAAOhQ,EACPgS,SAAU,SAAAtC,GAAC,OAAID,EAASC,EAAGzP,EAAhB,EACX4R,UAAU,SALd,kBAMM,kBACE3S,KAAK,SACLgG,GAAG,MACH8K,MAAO9P,EACP8R,SAAU,SAAAtC,GAAC,OAAID,EAASC,EAAGvP,EAAhB,EACX0R,UAAU,aAGlB,SAAC,KAAD,CAAU3M,GAAG,UAAUoN,MAAOvO,EAAO2K,QAAS6D,QAASZ,EAAca,KAAK,uDAC1E,SAAC,KAAD,CAAUtN,GAAG,eAAeoN,MAAOvO,EAAO4F,aAAc4I,QAASZ,EAAca,KAAK,+EAEpF,kFACA,SAACC,EAAA,aAAD,CAAwBF,QA1BX,SAAC7C,GAAD,OAAwCV,GAAU,SAAAyC,GAAI,yBAAUA,GAAV,IAAgBzE,WAAY0C,EAAEgD,KAAI,SAAAC,GAAC,OAAIA,EAAE3C,KAAN,KAAnC,GAAtD,EA0BkC4C,OAAQ9D,EAAc9B,cAErE,oGACA,SAACyF,EAAA,gBAAD,CAA2BF,QA5Bf,SAAC7C,GAAD,OAAiDV,GAAU,SAAAyC,GAAI,yBAAUA,GAAV,IAAgBhD,eAAgBiB,EAAEgD,KAAI,SAAAC,GAAC,OAAIA,EAAE3C,KAAN,KAAvC,GAA/D,EA4BqC4C,OAAQ9D,EAAcL,kBAEvE,uFACA,SAACgE,EAAA,WAAD,CAAsBF,QA9BT,SAAC7C,GAAD,OAAgCV,GAAU,SAAAyC,GAAI,yBAAUA,GAAV,IAAgBnH,SAAUoF,EAAEgD,KAAI,SAAAC,GAAC,OAAIA,EAAE3C,KAAN,KAAjC,GAA9C,EA8BgC4C,OAAQ9D,EAAcxE,YAEnE,mGACA,SAACmI,EAAA,SAAD,CAAoBF,QAhCL,SAAC7C,GAAD,OAA8BV,GAAU,SAAAyC,GAAI,yBAAUA,GAAV,IAAgB9J,OAAQ+H,EAAEgD,KAAI,SAAAC,GAAC,OAAIA,EAAE3C,KAAN,KAA/B,GAA5C,EAgC8B4C,OAAQ9D,EAAcnH,UAEnE,SAACkL,EAAA,QAAD,CAAmB7C,MAAOtQ,EAAQoT,QAASnT,KAC3C,SAACkT,EAAA,SAAD,CAAoB7C,MAAOpQ,EAAQkT,QAASjT,KAE5C,SAAC,KAAD,CAAUqF,GAAG,QAAQoN,MAAOxS,EAASyS,QAAS,SAAA7C,GAAC,OAAI3P,EAAW2P,EAAEK,OAAOpK,QAAxB,EAAkC6M,KAAK,qGAEtF,SAACO,EAAA,EAAD,CAASC,EAAG5S,EAAO4S,EAAGC,KAAM/C,KAC5B,0FAAgB9Q,MAChB,2DAAUI,MACV,uBAAIF,MAGf,C","sources":["hooks/run.hook.ts","ts/main.ts","pages/Abit2GU.tsx"],"sourcesContent":["import { useState } from \"react\";\r\n// import { useBeforeunload } from 'react-beforeunload';\r\n// import { IApplConfig } from \"../ts/applications\";\r\n// import { akt2json, genArr, log2csv, spliceIntoChunks } from \"../ts/utils\";\r\nimport useBtn from \"./btn.hook\";\r\n\r\n\r\ninterface IRun {\r\n    disabledDefault?: boolean;\r\n    convertDefault: boolean;\r\n    getZeroFunc: any;\r\n    type: \"pages\" | \"abits\";\r\n    handlerFunc: any;\r\n}\r\n\r\nconst useRun = ({\r\n    disabledDefault,\r\n    convertDefault,\r\n    getZeroFunc,\r\n    handlerFunc,\r\n    type\r\n}: IRun) => {\r\n    const [currAbit, sca] = useState(\"\");\r\n    const [status, ss] = useState(\"\");\r\n    const [counter, sc] = useState(\"\");\r\n    const [saveAt, setSaveAt] = useState(50);\r\n    const [resize, setResize] = useState(10);\r\n    const [convert, setConvert] = useState(convertDefault);\r\n\r\n    const [start, setStart] = useState(1);\r\n    const [end, setEnd] = useState(0);\r\n\r\n    const runBtn = useBtn(\"run\", \"RUN\", disabledDefault);\r\n\r\n    // const run = useCallback(async () => {\r\n    //     setCounter(\"\");\r\n    //     runBtn.disable();\r\n    //     runBtn.remove();\r\n\r\n    //     const logs = getZeroFunc(config) as L;\r\n\r\n    //     const fast = (resize === 1) ? \"\" : \"Fast\";\r\n\r\n    //     const { total, count_page } = await getPages(config);\r\n    //     const totalPages = genArr(count_page);\r\n    //     const splitedPages = spliceIntoChunks(totalPages, resize);\r\n\r\n    //     const limit = config.limit || 1;\r\n    //     let c = resize * limit;\r\n\r\n    //     for (const pages of splitedPages) {\r\n\r\n    //         if (c > total) c = total;\r\n    //         const p = Math.round(c / total * 10000) / 100;\r\n    //         setCounter(`${p}% (${c}/${total})`);\r\n\r\n    //         const toPromise: Promise<F>[] = [];\r\n    //         pages.forEach(page => toPromise.push(handlerFunc(page, { sca: setCurrAbit, ss: setStatus, config })));\r\n    //         await Promise.all(toPromise).then(localLogs => localLogs.flat().forEach(o => logs[o.id] = o));\r\n    //         if (c % saveAt === 0) {\r\n    //             runBtn.update(`${config.onlySogl ? \"\" : \"Full\"}ApplLog${c}.json`, akt2json(logs));\r\n    //         }\r\n\r\n    //         c += resize * limit;\r\n    //     }\r\n\r\n    //     const getBlob = (convert: boolean, logs: L) => {\r\n    //         if (convert) {\r\n    //             return [log2csv(logs), \"csv\"];\r\n    //         }\r\n    //         return [akt2json(logs), \"json\"];\r\n    //     };\r\n\r\n    //     const date = new Date();\r\n    //     const [data, ext] = (convert) ? [log2csv(logs), \"csv\"] : [akt2json(logs), \"json\"];\r\n    //     runBtn.update(`${config.onlySogl ? \"\" : \"Full\"}ApplLog${date.toISOString()}_${total}.${ext}`, data);\r\n    //     runBtn.enable();\r\n\r\n    // }, [runBtn, config, resize, convert, saveAt]);\r\n\r\n\r\n\r\n    return {\r\n        start, setStart,\r\n        end, setEnd,\r\n        currAbit, sca,\r\n        status, ss,\r\n        counter, sc,\r\n        saveAt, setSaveAt,\r\n        resize, setResize,\r\n        convert, setConvert,\r\n        runBtn\r\n    };\r\n};\r\n\r\nexport default useRun;","/**\r\n * @copyright kazakovstepan, 2022\r\n */\r\n\r\nimport { AbitAdmissionConditionVals, Achievement, AgreementSelectedProgram, IRealAbit } from \"../models/abit\";\r\nimport { Education, Exam, Personally } from \"../models/abit\";\r\nimport { IConfig, IEgeFull, IMainLog, ILogAppls, ISSPVOObj, RSS, IegeLog, preLog, DS } from \"../models/common\";\r\nimport {\r\n    Doc, IAppAns, IApplication, IDefaulAns, IDocsAns, ISearchAns,\r\n    IVIAns, IShort, IAnsApplInfo, ISums\r\n} from \"../models/sspvo\";\r\nimport { MainAns, setApplStatus } from \"./applications\";\r\nimport { getGUApplId } from \"./getBigFuncs\";\r\nimport { postDocs, makeForm, f, addLog, getIdBySnilsOrFIO, formatIssuedDate } from \"./utils\";\r\nimport { getOKSM, getPassportId, getSubjectId, getRegionId } from \"./getBigFuncs\";\r\n\r\nconst { get, post } = f;\r\n\r\nexport function passportForm(data: Personally, uid: number, sspvo_id: number) {\r\n    return {\r\n        doc_series: data.documents.person_id.series,\r\n        doc_number: data.documents.person_id.number,\r\n        issue_date: formatIssuedDate(data.documents.person_id.issued_date),\r\n        subdivision_code: data.documents.person_id.division_code,\r\n        doc_organization: data.documents.person_id.division_name,\r\n        surname: data.full_name.last_name,\r\n        name: data.full_name.first_name,\r\n        patronymic: data.full_name.middle_name,\r\n        id_okcm: getOKSM(data.citizenship),\r\n        id_document_type: getPassportId(data.documents.person_id.type),\r\n        uid: `${uid}_person_id`,\r\n        id_entrant: sspvo_id\r\n    };\r\n}\r\n\r\nexport function attestatForm(edu: Education, uid: number, sspvo_id: number, passport_id: number) {\r\n    return {\r\n        id_education_level: 2,\r\n        id_entrant: sspvo_id,\r\n        id_document_type: 7,\r\n        id_ident_document: passport_id,\r\n        doc_version: 31,\r\n        doc_number: edu.document_education.number,\r\n        issue_date: formatIssuedDate(edu.document_education.issued_date),\r\n        doc_org: edu.university.name,\r\n        uid: `${uid}_education`,\r\n        doc_name: \"Аттестат о среднем (полном) общем образовании\",\r\n    };\r\n}\r\n\r\nexport function egeForm(edu: Education, exam: Exam, uid: number, sspvo_id: number, passport_id: number) {\r\n    const id_subject = getSubjectId(exam.discipline);\r\n    return {\r\n        id_region: getRegionId(edu.university.region),\r\n        id_subject: id_subject,\r\n        mark: exam.scores,\r\n        result_date: `${exam.year}-07-18`,\r\n        id_entrant: sspvo_id,\r\n        id_document_type: 3,\r\n        id_ident_document: passport_id,\r\n        issue_date: `${exam.year}-07-18`,\r\n        doc_version: 47,\r\n        doc_org: edu.university.name,\r\n        uid: `${uid}_education_ege_${id_subject}`,\r\n        doc_name: \"Результат ЕГЭ\"\r\n    };\r\n}\r\n\r\nasync function getGUPerson(fullAbit: IRealAbit, ss: RSS, config: IConfig, logObj: IMainLog) {\r\n\r\n    const { sspvo_id, snils } = await getIdBySnilsOrFIO(logObj, logObj.snils);\r\n\r\n    ss(`Снилс ${snils}`);\r\n    console.log(`Снилс ${snils}`);\r\n    const uid = fullAbit.application.user.student_details_id;\r\n    ss(`ITMO UID ${uid}`);\r\n\r\n    const egeLog: IegeLog[] = [];\r\n\r\n    if (sspvo_id) {\r\n\r\n        logObj.gu_id = sspvo_id;\r\n        let is_ege = false;\r\n\r\n        const short = await get<IShort>(`/api/entrants/${sspvo_id}/short`);\r\n        logObj.gu_attestat_orig = false;\r\n\r\n        if (short.done) {\r\n            logObj.gu_attestat_orig = short.data.orig_doc;\r\n        }\r\n\r\n        ss(`Найден в базе ГУ ИТМО, id ${sspvo_id}`);\r\n\r\n        let sspvo: ISSPVOObj = {\r\n            passport: { exist: false, id: 0 },\r\n            attestat: { exist: false, id: 0, count: 0 },\r\n            ege: [],\r\n            egeFull: {}\r\n        };\r\n\r\n        const checkDoc = (doc: Doc) => {\r\n            const docType = doc.id_document_type;\r\n\r\n            if (docType === 1 || docType === 40) {\r\n                if (!logObj.passport_match || doc.checked) {\r\n                    console.log(\"Найден Паспорт\");\r\n                    ss(`Найден Паспорт, id ${doc.id}`);\r\n                    sspvo.passport.id = doc.id;\r\n                    sspvo.passport.exist = true;\r\n                    logObj.gu_series = doc.doc_series || \"\";\r\n                    logObj.gu_number = doc.doc_number || \"\";\r\n                    logObj.passport_match = (logObj.gu_series === logObj.abit_series && logObj.gu_number === logObj.abit_number);\r\n                }\r\n            }\r\n            switch (docType) {\r\n                case 503: //temp\r\n                    if (doc.name_subject !== null) {\r\n                        is_ege = true;\r\n                        const exist = Object.hasOwn(sspvo.egeFull, doc.name_subject);\r\n                        console.log(doc.name_subject, doc.mark, doc.id);\r\n                        ss(`Найден ЕГЭ, ${doc.name_subject}, ${doc.mark}`);\r\n                        egeLog.push({ id: doc.id, name: doc.name_subject, points: doc.mark || 0, status: true });\r\n                        sspvo.ege.push(doc.name_subject);\r\n                        if (!exist || (exist && doc.checked)) {\r\n                            sspvo.egeFull[doc.name_subject] = { id: doc.id, points: doc.mark! };\r\n                        }\r\n                    }\r\n                    break;\r\n                case 7:\r\n                case 9:\r\n                case 10:\r\n                    if (!logObj.attestat_match || doc.checked) {\r\n                        console.log(\"Документ об образовании\", doc.id);\r\n                        ss(`Документ об образовании, ${doc.id}`);\r\n                        sspvo.attestat.id = doc.id;\r\n                        sspvo.attestat.count += 1;\r\n                        sspvo.attestat.exist = true;\r\n                        logObj.gu_attestat_number = doc.doc_number || \"\";\r\n                        logObj.attestat_match = (logObj.abit_attestat_number === logObj.gu_attestat_number)\r\n                            || (logObj.abit_attestat_number === doc.doc_series + logObj.gu_attestat_number);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const passportAns = await get<IDocsAns>(`/api/entrants/${sspvo_id}/docs/short?categories=identification`);\r\n        if (passportAns.done) {\r\n            if (passportAns.data.length === 0) {\r\n                addLog(logObj, \"error_passport\", \"Нет документов\");\r\n\r\n                if (config.addDocs) {\r\n                    console.log(\"Добавление паспорта\");\r\n                    let formData = makeForm(passportForm(fullAbit.personally, uid, sspvo_id));\r\n                    sspvo.passport.id = await postDocs(\"/api/docs/idents/add\", formData);\r\n                    sspvo.passport.exist = Boolean(sspvo.passport.id);\r\n                }\r\n\r\n            } else {\r\n                passportAns.data[0]?.docs?.forEach(checkDoc);\r\n\r\n                if (!logObj.passport_match && fullAbit.personally.documents.is_have_old_passport) {\r\n                    logObj.error_passport = \"Старый паспорт?\";\r\n                    const passport_old = fullAbit.personally.documents.passport_old;\r\n                    logObj.abit_number = passport_old?.number;\r\n                    logObj.abit_series = passport_old?.series;\r\n                    sspvo.passport.exist = false;\r\n                    passportAns.data[0]?.docs?.forEach(checkDoc);\r\n                }\r\n            }\r\n        }\r\n\r\n        const docsAns = await get<IDocsAns>(`/api/entrants/${sspvo_id}/docs/short?no_categories=identification`);\r\n        if (docsAns.done) {\r\n\r\n            if (docsAns.data.length === 0) {\r\n                addLog(logObj, \"attestat_error\", \"Нет Аттестата, нет ЕГЭ\");\r\n            } else {\r\n                docsAns.data[0]?.docs?.forEach(checkDoc);\r\n            }\r\n\r\n            if (!sspvo.attestat.exist && config.addDocs) {\r\n                console.log(\"Добавление аттестата\");\r\n                let formData = makeForm(attestatForm(fullAbit.education, uid, sspvo_id, sspvo.passport.id));\r\n                sspvo.attestat.id = await postDocs(\"/api/docs/add\", formData);\r\n                sspvo.attestat.exist = Boolean(sspvo.attestat.id);\r\n            }\r\n\r\n            if (config.addDocs && (!is_ege || sspvo.ege.length < fullAbit.exams.exams.length)) {\r\n                console.log(\"Что то с егэ\");\r\n                for (const exam of fullAbit.exams.exams) {\r\n                    if (!sspvo.ege.includes(exam.discipline)) {\r\n                        console.log(\"Добавление\", exam.discipline);\r\n                        let formData = makeForm(egeForm(fullAbit.education, exam, uid, sspvo_id!, sspvo.passport.id));\r\n                        const ege_id = await postDocs(\"/api/docs/add\", formData);\r\n                        sspvo.egeFull[exam.discipline] = { id: ege_id, points: exam.scores };\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (sspvo.attestat.exist) {\r\n\r\n                if (!logObj.gu_attestat_orig) {\r\n                    if (config.guSets?.includes(\"orig\") || (logObj.passport_match && logObj.attestat_match)) {\r\n                        await setOriginal(sspvo_id, sspvo.attestat.id, fullAbit, logObj);\r\n                    }\r\n                } else {\r\n                    console.log(\"Оригинал!\");\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        await checkAppls({ sspvo_id, uid, attestat_id: sspvo.attestat.id },\r\n            fullAbit.achievements.achievements, ss, sspvo.egeFull, config, logObj, fullAbit);\r\n\r\n    } else if (config.searchInGUDB) {\r\n\r\n        console.log(\"Поиск в общей базе ГУ\");\r\n\r\n        if (fullAbit.personally.documents.person_id.scans.length !== 0) {\r\n\r\n            const { name, surname, patronymic } = logObj;\r\n            const gu_fio = { name, surname, patronymic };\r\n\r\n            const ans = await post<ISearchAns>(\"/api/entrant/search\", gu_fio);\r\n\r\n            if (ans.done) {\r\n                const id = ans.data.id;\r\n\r\n                ss(`Найден в общей базе ГУ, id ${id}`);\r\n                console.log(`Найден в общей базе ГУ, id ${id}`);\r\n\r\n                const addAns = await post<ISearchAns>(`/api/entrants/${id}/link/add`, { ...gu_fio, id });\r\n\r\n                if (addAns.done) {\r\n                    ss(\"Добавлен в базу ИТМО\");\r\n                    await getGUPerson(fullAbit, ss, config, logObj);\r\n                } else {\r\n                    console.log(addAns.message);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    } else {\r\n        addLog(logObj, \"error_gu_search\", \"Добавление новых людей отключено на ГУ!\");\r\n    }\r\n}\r\n\r\n// const stopDelo: string[] = [];\r\n\r\nasync function setOriginal(sspvo_id: number, attestat_id: number, abit: IRealAbit, logObj: IMainLog) {\r\n\r\n    const user = abit.application.user;\r\n    // const delo = abit.application.number;\r\n\r\n    // if (!stopDelo.includes(delo)) {\r\n\r\n    if (user.is_send_original) {\r\n        const ans = await post(`/api/entrants/${sspvo_id}/original-education-document`, {\r\n            id_document: attestat_id,\r\n            orig_doc_date: user.is_send_original_updated_at || \"2022-07-28T15:00:00+03:00\"\r\n        });\r\n\r\n        logObj.gu_attestat_orig = (ans.done);\r\n    }\r\n    // } else {\r\n    //     console.log(delo + \" Фэйк!\");\r\n    // }\r\n\r\n}\r\n\r\nexport const stopList2 = [\r\n    \"05.03.06\",\r\n    \"12.03.01\",\r\n    \"12.03.02\",\r\n    \"12.03.05\",\r\n    \"13.03.01\",\r\n    \"13.03.02\",\r\n    \"18.03.02\"\r\n];\r\n\r\nconst stopList: string[] = [];\r\n\r\nasync function checkAppl(appl: IApplication, aches: Achievement[],\r\n    ids: IcheckApplIds, ss: RSS, fullEge: IEgeFull, config: IConfig, logObj: IMainLog) {\r\n\r\n    const { id } = appl;\r\n    const appl_code = appl.comment.slice(2, 10);\r\n    ss(`Заявление ${appl_code}`);\r\n\r\n    logObj.epgu_id = appl.uid_epgu || 0;\r\n    logObj.appl_id = id;\r\n    logObj.appl_name = appl_code + \".\";\r\n\r\n    const logAppl = { id, name: appl_code } as ILogAppls;\r\n    logAppl.errors = [];\r\n    logAppl.info = [];\r\n\r\n    if (stopList.includes(appl_code.slice(0, 8))) {\r\n        console.log(\"TEMP SKIP\", appl_code);\r\n        logAppl.errors.push(\"Вариативность ещё не починили на ГУ!\");\r\n    } else {\r\n\r\n        const CHECK_STATUS = config.changeStatus;\r\n\r\n        if (CHECK_STATUS) {\r\n\r\n            const ans = await get<IVIAns>(`/api/applications/${id}/tests/list`);\r\n\r\n            if (ans.done) {\r\n\r\n                for (const vi of ans.data) {\r\n\r\n                    if (vi.id_entrance_test_type === 4) {\r\n\r\n                        if (!vi.app_entrance_test) {\r\n                            // console.log(vi);\r\n                            for (const ege of Object.keys(fullEge)) {\r\n\r\n                                if (fullEge[ege].id === 0) {\r\n                                    logAppl.errors.push(\"ID=0, \" + vi.name_subject);\r\n                                }\r\n\r\n                                if (ege.includes(vi.name_subject)) {\r\n\r\n                                    console.log(\"Добавление ЕГЭ в ВИ\", vi.name_subject, fullEge[ege]);\r\n\r\n                                    let ans = await post(`/api/applications/${id}/tests/add`, {\r\n\r\n                                        id_entrance_test: vi.id,\r\n                                        result_value: fullEge[ege].points,\r\n                                        uid: null,\r\n                                        id_document: fullEge[ege].id,\r\n                                        document_name: \"Результат ЕГЭ\",\r\n                                        id_result_source: 1\r\n\r\n                                    });\r\n\r\n                                    if (ans.done) {\r\n                                        console.log(\"Добавлено\", ege);\r\n                                        logAppl.info.push(`Добавлено ЕГЭ ${ege}`);\r\n                                    }\r\n\r\n                                } else {\r\n                                    // console.log(\"Нет результатов ЕГЭ\", vi.name_subject);\r\n                                    logAppl.errors.push(\"Нет результатов ЕГЭ \" + vi.name_subject);\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (config.changeStatus) {\r\n\r\n                    const ans = await setApplStatus(id, \"in_competition\", {\r\n                        comment: \"Публикация конкурсных списков ожидается...\",\r\n                        id_notices_types: 10\r\n                    });\r\n                    if (ans.done) {\r\n                        console.log(ans.message, \"В конкурсе!\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (config.guChecks?.includes(\"sums\")) {\r\n\r\n            const ans = await get<ISums>(`/api/applications/${id}/points_sum`);\r\n            if (ans.done) {\r\n\r\n                let itmoAhesSum = aches.reduce((sum, ahc) => {\r\n                    sum += ahc.scores;\r\n                    return sum;\r\n                }, 0);\r\n\r\n                if (itmoAhesSum > 10) {\r\n                    itmoAhesSum = 10;\r\n                }\r\n\r\n                if (ans.data.sum_achievements === itmoAhesSum) {\r\n                    console.log(\"Суммы ИД совпадают!\");\r\n                    logAppl.sumStatus = \"OK\";\r\n                } else if (ans.data.sum_achievements > itmoAhesSum) {\r\n                    const status = `Сумма на ССПВО больше чем в ИТМО! ${ans.data.sum_achievements} ${itmoAhesSum}`;\r\n                    console.log(status);\r\n                    logAppl.sumStatus = status;\r\n                } else if (ans.data.sum_achievements !== itmoAhesSum && config.addDocs) {\r\n                    console.log(\"Суммы ИД не совпадают!\", ans.data.sum_achievements, itmoAhesSum);\r\n\r\n                    ss(\"Добавление ИД в систему...\");\r\n\r\n                    const ansAdd = await post<IDefaulAns<{\r\n                        id_achievements: number;\r\n                        id_application: number;\r\n                    }>>(`/api/applications/${id}/achievements/add`, {\r\n                        id_document: ids.attestat_id,\r\n                        id_category: 11,\r\n                        name: \"Другие индивидуальные достижения\",\r\n                        mark: itmoAhesSum - ans.data.sum_achievements,\r\n                        uid: `${ids.uid}_achievements_other_${id}`,\r\n                        id_achievement: null\r\n                    });\r\n\r\n                    if (ansAdd.done) {\r\n                        console.log(ansAdd.message);\r\n                        logAppl.info.push(\"Добавлено ИД\");\r\n                    }\r\n\r\n                }\r\n\r\n                logAppl.sumTotal = ans.data.sum_tests + ans.data.sum_achievements;\r\n\r\n                logObj.abit_sums_ach = itmoAhesSum;\r\n                logObj.gu_sums_ach = ans.data.sum_achievements;\r\n                logObj.gu_sums_ege = ans.data.sum_tests;\r\n                logObj.gu_sums_total = logAppl.sumTotal;\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function checkBen(id: number, logObj: IMainLog, abitCondition: AbitAdmissionConditionVals) {\r\n    if (abitCondition !== \"general_competition\") {\r\n        logObj.benefints = \"Особое право не стоит\";\r\n        const ansApplMain = await get<MainAns>(`/api/applications/${id}/main`);\r\n        if (ansApplMain.done) {\r\n            const ben = ansApplMain.data.benefits;\r\n            if (ben?.length !== 0) {\r\n                if (ben?.[0]) {\r\n                    logObj.benefints = ben[0].name_benefit;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function checkAgree(id: number, logObj: IMainLog, dataOrig: DS | undefined, config: IConfig) {\r\n    const agrAns = await get<IDefaulAns<{ agreed: boolean; }>>(`/api/applications/${id}/info/agreed`);\r\n\r\n    if (agrAns.done) {\r\n        logObj.agreement = Boolean(agrAns.data.agreed);\r\n\r\n        if (!logObj.agreement && config.guSets?.includes(\"agreement\")) {\r\n\r\n            const ansInfo = await get<IAnsApplInfo>(`/api/applications/${id}/info`);\r\n            if (ansInfo.done) {\r\n\r\n                const prevInfo = ansInfo.data;\r\n                prevInfo.agreed = true;\r\n                prevInfo.agreed_date = dataOrig || \"2022-07-28T15:00:00+03:00\";\r\n                const ansEdit = await post(`/api/applications/${id}/info/edit`, prevInfo);\r\n                addLog(logObj, \"agreement_log\", `Согласие ${(ansEdit.done) ? \"\" : \"не \"}проставлено!`);\r\n                logObj.agreement = ansEdit.done;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IcheckApplIds {\r\n    sspvo_id: number;\r\n    uid: number | string;\r\n    attestat_id: number;\r\n}\r\n\r\nfunction getAbitProg(logObj: IMainLog, selected_program: AgreementSelectedProgram): [string, AbitAdmissionConditionVals] {\r\n    logObj.letter = \"О\";\r\n    if (selected_program.financing === \"contract\") {\r\n        logObj.letter = \"К\";\r\n    } else {\r\n        switch (selected_program.admission_condition) {\r\n            case \"by_special_quota\":\r\n                logObj.letter = \"С\";\r\n                break;\r\n            case \"by_target_quota\":\r\n                logObj.letter = \"Ц\";\r\n                break;\r\n            case \"by_unusual_quota\":\r\n                logObj.letter = \"Л\";\r\n                break;\r\n            case \"on_state_line\":\r\n                logObj.letter = \"И\";\r\n                break;\r\n        }\r\n    }\r\n    return [selected_program.competitive_group?.title?.slice(0, 8) + ` (${logObj.letter})`, selected_program.admission_condition];\r\n}\r\n\r\nexport async function checkAppls(ids: IcheckApplIds, aches: Achievement[], ss: RSS,\r\n    fullEge: IEgeFull, config: IConfig, logObj: IMainLog, abit?: IRealAbit) {\r\n    console.group(\"Проверка заявлений\");\r\n\r\n    const [abit_prog, abit_cond] = getAbitProg(logObj, abit!.application.agreement.selected_program);\r\n    const ans = await get<IAppAns>(`/api/entrants/${ids.sspvo_id}/applications`);\r\n\r\n    if (ans.done) {\r\n\r\n        for (const appl of ans.data) {\r\n            if (config.guStatuses!.includes(appl.code_status)) {\r\n                if (appl.comment.includes(abit_prog)) {\r\n\r\n                    console.group(\"Заявление\", abit_prog);\r\n                    await Promise.all([\r\n                        checkBen(appl.id, logObj, abit_cond),\r\n                        checkAgree(appl.id, logObj, abit?.application.user.is_send_original_updated_at, config),\r\n                        checkAppl(appl, aches, ids, ss, fullEge, config, logObj),\r\n                    ]);\r\n                    console.groupEnd();\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n    } else if (0) { ////////////////////////////////\r\n        console.log(\"Нет заявлений!\");\r\n\r\n        if (abit) {\r\n\r\n            for (const itmoAppl of abit.selected_programs) {\r\n\r\n                let letter = \"О\";\r\n\r\n                if (itmoAppl.financing === \"contract\") {\r\n                    letter = \"К\";\r\n                } else {\r\n                    if (itmoAppl.admission_condition === \"by_unusual_quota\") {\r\n                        letter = \"Л\";\r\n                    }\r\n                }\r\n\r\n                const code_id = getGUApplId(`${itmoAppl.direction_code} (${letter})`);\r\n\r\n                await post(\"/api/applications/add\", {\r\n                    \"id_competitive_group\": code_id,\r\n                    \"id_entrant\": 90178,\r\n                    \"docs\": [\r\n                        {\r\n                            \"document_name\": \"Паспорт гражданина Российской Федерации\",\r\n                            \"id\": 75699,\r\n                            \"name_category\": \"idents\",\r\n                            \"name_type\": \"Паспорт гражданина Российской Федерации\",\r\n                            \"type\": \"idents\"\r\n                        },\r\n                        {\r\n                            \"document_name\": \"Аттестат о среднем (полном) общем образовании\",\r\n                            \"id\": 113306,\r\n                            \"name_category\": \"docs\",\r\n                            \"name_type\": \"Аттестат о среднем (полном) общем образовании\",\r\n                            \"type\": \"docs\"\r\n                        }\r\n                    ],\r\n                    \"ids_benefits\": [],\r\n                    \"app_number\": \"1\",\r\n                    \"registration_date\": \"2022-07-18T00:00:00+03:00\",\r\n                    \"uid\": null,\r\n                    \"rating\": null,\r\n                    \"priority\": 1,\r\n                    \"first_higher_education\": true,\r\n                    \"agree_epgu\": false,\r\n                    \"original_doc\": null,\r\n                    \"agreed\": null,\r\n                    \"agreed_date\": null,\r\n                    \"need_hostel\": false,\r\n                    \"special_conditions\": false,\r\n                    \"id_target_organization\": null\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    console.groupEnd();\r\n}\r\n\r\nfunction checkKeys(logObj: IMainLog, config: IConfig) {\r\n    if (!config.guChecks?.includes(\"sums\")) {\r\n        delete logObj.abit_sums_ach;\r\n        delete logObj.gu_sums_ach;\r\n        delete logObj.gu_sums_ege;\r\n        delete logObj.gu_sums_total;\r\n    }\r\n}\r\n\r\nexport function genZeroAbit(config: IConfig) {\r\n    const zeroObj = {\r\n        gu_id: \"id ГУ\",\r\n        epgu_id: \"ЕПГУ\",\r\n        phone: \"телефон\",\r\n        full_name: \"ФИО\",\r\n        delo: \"дело\",\r\n        snils: \"снилс\",\r\n        surname: \"фамилия\",\r\n        name: \"имя\",\r\n        patronymic: \"отчество\",\r\n        gu_series: \"гу серия\",\r\n        gu_number: \"гу номер\",\r\n        abit_series: \"абит серия\",\r\n        abit_number: \"абит номер\",\r\n        passport_match: \"пасспорт совпадает\",\r\n        abit_attestat_number: \"абит атестат\",\r\n        gu_attestat_number: \"гу аттестат\",\r\n        attestat_match: \"атестат совпадает\",\r\n        gu_attestat_orig: \"гу оригинал\",\r\n        appl_id: \"id заявления\",\r\n        appl_name: \"КГ\",\r\n        letter: \"условие\",\r\n        agreement: \"гу согласие\",\r\n        abit_benefints: \"абит условие\",\r\n        abit_financing: \"абит бюджет\",\r\n        benefints: \"особое право\",\r\n        abit_sums_ach: \"абит сумма ид\",\r\n        gu_sums_ach: \"гу сумма ид\",\r\n        gu_sums_ege: \"гу егэ\",\r\n        gu_sums_total: \"гу всего\",\r\n        agreement_log: \"лог согласие\",\r\n        admc_error: \"Ошибка выгрузки\",\r\n        skip_admc: \"пропущено\",\r\n        skip_achievements: \"пропущено ид\",\r\n        error_gu_search: \"ошибка поиска на гу\",\r\n        error_passport: \"ошибка паспорта\",\r\n        attestat_error: \"ошибка аттестат\",\r\n    } as unknown as IMainLog;\r\n    checkKeys(zeroObj, config);\r\n    return { 0: zeroObj };\r\n}\r\n\r\nasync function main(abit: IRealAbit, sca: RSS, ss: RSS, config: IConfig): Promise<preLog> {\r\n\r\n    const logObj: IMainLog = {\r\n        gu_id: -1,\r\n        epgu_id: -1,\r\n        phone: abit.personally.contact?.phone || \"\",\r\n        full_name: \"\",\r\n        delo: abit.application.number,\r\n        snils: abit.personally.documents.snils?.number?.trim() || \"\",\r\n        surname: abit.personally.full_name.last_name.trim(),\r\n        name: abit.personally.full_name.first_name.trim(),\r\n        patronymic: abit.personally.full_name.middle_name?.trim() || \"\",\r\n        gu_series: \"\",\r\n        gu_number: \"\",\r\n        abit_series: abit.personally.documents.person_id.series?.trim() || \"\",\r\n        abit_number: abit.personally.documents.person_id.number?.trim() || \"\",\r\n        passport_match: false,\r\n        abit_attestat_number: abit.education?.document_education?.number?.trim() || \"\",\r\n        gu_attestat_number: \"\",\r\n        attestat_match: false,\r\n        gu_attestat_orig: false,\r\n        appl_id: -1,\r\n        appl_name: \"\",\r\n        letter: \"unknown\",\r\n        agreement: \"unknown\",\r\n        abit_benefints: \"\",\r\n        abit_financing: \"\",\r\n        benefints: \"\",\r\n        abit_sums_ach: -1,\r\n        gu_sums_ach: -1,\r\n        gu_sums_ege: -1,\r\n        gu_sums_total: -1,\r\n        agreement_log: \"\",\r\n        admc_error: \"\",\r\n        skip_admc: \"\",\r\n        skip_achievements: \"\",\r\n        error_gu_search: \"\",\r\n        error_passport: \"\",\r\n        attestat_error: \"\",\r\n    };\r\n\r\n    checkKeys(logObj, config);\r\n    // setDefaultKeys(logObj);\r\n\r\n    const currAbit = `${logObj.surname} ${logObj.name} ${logObj.patronymic}`;\r\n    sca(currAbit);\r\n    logObj.full_name = currAbit;\r\n\r\n    const abitCondition = abit.application.agreement?.selected_program?.admission_condition;\r\n    logObj.abit_benefints = abitCondition;\r\n    logObj.abit_financing = abit.application.agreement?.selected_program?.financing;\r\n\r\n    if (config.abitConditions?.includes(abitCondition)) {\r\n\r\n        if ((config.onlyAch && abit.achievements?.is_have_achievements) || !config.onlyAch) {\r\n\r\n            console.group(currAbit);\r\n            console.log(abit.application.number);\r\n\r\n            if (abit.application.agreement.selected_program) {\r\n                await getGUPerson(abit, ss, config, logObj);\r\n            } else {\r\n                addLog(logObj, \"admc_error\", \"Empty\");\r\n            }\r\n            console.groupEnd();\r\n\r\n        } else {\r\n            addLog(logObj, \"skip_achievements\", \"Нет ИД в Абите\");\r\n        }\r\n    } else {\r\n        // addLog(logObj, \"skip_admc\", \"abit_condition\");\r\n    }\r\n    return [abit.application?.user?.student_details_id || Date.now(), logObj];\r\n\r\n}\r\n\r\nexport default main;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { AbitAdmissionConditionVals, IRealAbit, IRealJSON } from \"../models/abit\";\r\nimport { IAbit2GUlog, IConfig, IGUChecks, IGUSets, preLog, RSSn } from \"../models/common\";\r\nimport { SSPVOCodeStatuses } from \"../models/sspvo\";\r\nimport main, { genZeroAbit } from \"../ts/main\";\r\nimport { genUpdateFunc, loadFiles, spliceIntoChunks } from \"../ts/utils\";\r\nimport { MultiSelect, IMultiSelect } from \"../components/MultiSel\";\r\nimport { CheckBox, SimpleSelect } from \"../components/SimpleSelect\";\r\nimport useRun from \"../hooks/run.hook\";\r\nimport MakeBtn from \"../components/MakeBtn\";\r\n\r\nconst defaultConfig: IConfig = {\r\n    limit: 1,\r\n    onlyAch: false,\r\n    changeStatus: false,\r\n    searchInGUDB: false,\r\n    addDocs: false,\r\n    guStatuses: [\"in_competition\"],\r\n    guChecks: [\"agreement\", \"attestat\"],\r\n    guSets: [\"agreement\", \"orig\"],\r\n    abitConditions: [\r\n        \"general_competition\",\r\n        \"without_entry_tests\",\r\n        \"by_unusual_quota\",\r\n        \"by_special_quota\",\r\n        \"by_target_quota\"\r\n    ]\r\n};\r\n\r\nconst Itmo2GU: React.FC = () => {\r\n\r\n    const [config, setConfig] = useState(defaultConfig);\r\n\r\n    const {\r\n        currAbit, sca,\r\n        status, ss,\r\n        counter, sc,\r\n        saveAt, setSaveAt,\r\n        resize, setResize,\r\n        convert, setConvert,\r\n        runBtn,\r\n        start, setStart,\r\n        end, setEnd\r\n    } = useRun({\r\n        convertDefault: true,\r\n        disabledDefault: true,\r\n        getZeroFunc: genZeroAbit,\r\n        type: \"abits\",\r\n        handlerFunc: main\r\n    });\r\n\r\n    const [fileName, setFileName] = useState(\"\");\r\n\r\n    const [bachelors, setBachelors] = useState<IRealAbit[]>([]);\r\n\r\n    useEffect(() => {\r\n        const len = bachelors.length;\r\n        if (!len) {\r\n            runBtn.remove();\r\n            sc(\"\");\r\n            sca(\"\");\r\n            ss(\"\");\r\n        }\r\n        setEnd(len);\r\n    }, [bachelors, runBtn, sc, ss, sca, setEnd]);\r\n\r\n    const loadFilesLocal = (event: React.ChangeEvent<HTMLInputElement>) => loadFiles(event, {\r\n        setName: (s: string) => {\r\n            setFileName(s);\r\n        },\r\n        post: () => {\r\n            runBtn.enable();\r\n            setStart(1);\r\n            setEnd(0);\r\n        },\r\n        then: parseJSON,\r\n        empty: () => setBachelors([])\r\n    });\r\n\r\n    const validate = (e: React.ChangeEvent<HTMLInputElement>, ss: RSSn) => {\r\n        e.preventDefault();\r\n        runBtn.enable();\r\n        const max = bachelors.length;\r\n        let newVal = e.target.value;\r\n        console.log(newVal);\r\n        const points = Number(newVal);\r\n        const validPoints = (points < 0) ? 0 : (points > max) ? max : points;\r\n\r\n        ss(validPoints);\r\n    };\r\n\r\n    const mergeJSONs = useCallback(async () => {\r\n        sc(\"\");\r\n        runBtn.disable();\r\n        runBtn.remove();\r\n\r\n        const logs = genZeroAbit(config) as IAbit2GUlog;\r\n\r\n        const genLog = genUpdateFunc(fileName + \"AbitLog\", convert, resize);\r\n\r\n        const backs = bachelors.slice(start - 1, end);\r\n        const total = backs.length;\r\n        const splitedBacks = spliceIntoChunks(backs, resize);\r\n\r\n        let c = resize;\r\n\r\n        for (const abit of splitedBacks) {\r\n\r\n            if (c > total) { c = total; }\r\n            sc(`${Math.round(c / total * 10000) / 100}% (${c}/${total})`);\r\n\r\n            const toPromise: Promise<preLog>[] = [];\r\n            abit.forEach(uno => toPromise.push(main(uno, sca, ss, config)));\r\n            await Promise.all(toPromise).then(localLogs => localLogs.forEach(([uid, log]) => logs[uid] = log));\r\n            if (c % saveAt === 0) { runBtn.update(genLog(c, logs)); }\r\n            c += resize;\r\n\r\n        }\r\n\r\n        runBtn.update(genLog(total, logs, false));\r\n        runBtn.enable();\r\n\r\n    }, [bachelors, runBtn, start, end, config, resize, saveAt, convert, fileName,\r\n        sc, ss, sca]);\r\n\r\n    const parseJSON = (str: string) => {\r\n        const preresult: IRealJSON = JSON.parse(str);\r\n        setBachelors(prev => [...preresult.result.bachelors, ...prev]);\r\n    };\r\n\r\n    const updateConfig = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const key = e.target.id as keyof IConfig;\r\n        setConfig(prev => ({ ...prev, [key]: !config[key] }));\r\n    };\r\n\r\n    const msHandlerGUS = (e: IMultiSelect<SSPVOCodeStatuses>) => setConfig(prev => ({ ...prev, guStatuses: e.map(o => o.value) }));\r\n    const msHandlerAC = (e: IMultiSelect<AbitAdmissionConditionVals>) => setConfig(prev => ({ ...prev, abitConditions: e.map(o => o.value) }));\r\n    const msHandlerACh = (e: IMultiSelect<IGUChecks>) => setConfig(prev => ({ ...prev, guChecks: e.map(o => o.value) }));\r\n    const msHandlerGUSet = (e: IMultiSelect<IGUSets>) => setConfig(prev => ({ ...prev, guSets: e.map(o => o.value) }));\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <input id=\"source\" type=\"file\" multiple accept=\"application/json\" onChange={loadFilesLocal} />\r\n            <label className=\"ssel\">С <input\r\n                type=\"number\"\r\n                id=\"start\"\r\n                value={start}\r\n                onChange={e => validate(e, setStart)}\r\n                className=\"numi\"\r\n            /> по <input\r\n                    type=\"number\"\r\n                    id=\"end\"\r\n                    value={end}\r\n                    onChange={e => validate(e, setEnd)}\r\n                    className=\"numi\"\r\n                />\r\n            </label>\r\n            <CheckBox id=\"onlyAch\" check={config.onlyAch} handler={updateConfig} text=\"Только ИД\" />\r\n            <CheckBox id=\"changeStatus\" check={config.changeStatus} handler={updateConfig} text=\"Менять статус\" />\r\n\r\n            <label>Статус ГУ</label>\r\n            <MultiSelect.GUStatuses handler={msHandlerGUS} defOpt={defaultConfig.guStatuses!} />\r\n\r\n            <label>Условие ИТМО</label>\r\n            <MultiSelect.AbitCondition handler={msHandlerAC} defOpt={defaultConfig.abitConditions!} />\r\n\r\n            <label>Проверять</label>\r\n            <MultiSelect.GUChecks handler={msHandlerACh} defOpt={defaultConfig.guChecks!} />\r\n\r\n            <label>Проставлять</label>\r\n            <MultiSelect.GUSets handler={msHandlerGUSet} defOpt={defaultConfig.guSets!} />\r\n\r\n            <SimpleSelect.Save value={saveAt} setFunc={setSaveAt} />\r\n            <SimpleSelect.Split value={resize} setFunc={setResize} />\r\n\r\n            <CheckBox id=\"toCSV\" check={convert} handler={e => setConvert(e.target.checked)} text=\"Конвертировать в CSV\" />\r\n\r\n            <MakeBtn p={runBtn.p} func={mergeJSONs} />\r\n            <p>Абитуриент: {currAbit}</p>\r\n            <p>Всего {counter}</p>\r\n            <p>{status}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Itmo2GU;"],"names":["disabledDefault","convertDefault","getZeroFunc","handlerFunc","type","useState","currAbit","sca","status","ss","counter","sc","saveAt","setSaveAt","resize","setResize","convert","setConvert","start","setStart","end","setEnd","runBtn","useBtn","get","f","post","passportForm","data","uid","sspvo_id","doc_series","documents","person_id","series","doc_number","number","issue_date","formatIssuedDate","issued_date","subdivision_code","division_code","doc_organization","division_name","surname","full_name","last_name","name","first_name","patronymic","middle_name","id_okcm","getOKSM","citizenship","id_document_type","getPassportId","id_entrant","attestatForm","edu","passport_id","id_education_level","id_ident_document","doc_version","document_education","doc_org","university","doc_name","egeForm","exam","id_subject","getSubjectId","discipline","id_region","getRegionId","region","mark","scores","result_date","year","getGUPerson","fullAbit","config","logObj","getIdBySnilsOrFIO","snils","console","log","application","user","student_details_id","egeLog","gu_id","is_ege","short","gu_attestat_orig","done","orig_doc","sspvo","passport","exist","id","attestat","count","ege","egeFull","checkDoc","doc","docType","passport_match","checked","gu_series","gu_number","abit_series","abit_number","name_subject","Object","hasOwn","push","points","attestat_match","gu_attestat_number","abit_attestat_number","passportAns","length","addLog","addDocs","formData","makeForm","personally","postDocs","Boolean","docs","forEach","is_have_old_passport","error_passport","passport_old","docsAns","education","exams","includes","ege_id","guSets","setOriginal","checkAppls","attestat_id","achievements","searchInGUDB","scans","gu_fio","ans","addAns","message","abit","is_send_original","id_document","orig_doc_date","is_send_original_updated_at","stopList","checkAppl","appl","aches","ids","fullEge","appl_code","comment","slice","epgu_id","uid_epgu","appl_id","appl_name","logAppl","errors","info","changeStatus","vi","id_entrance_test_type","app_entrance_test","keys","id_entrance_test","result_value","document_name","id_result_source","setApplStatus","id_notices_types","guChecks","itmoAhesSum","reduce","sum","ahc","sum_achievements","sumStatus","id_category","id_achievement","ansAdd","sumTotal","sum_tests","abit_sums_ach","gu_sums_ach","gu_sums_ege","gu_sums_total","checkBen","abitCondition","benefints","ansApplMain","ben","benefits","name_benefit","checkAgree","dataOrig","agrAns","agreement","agreed","ansInfo","prevInfo","agreed_date","ansEdit","getAbitProg","selected_program","letter","financing","admission_condition","competitive_group","title","group","abit_prog","abit_cond","guStatuses","code_status","Promise","all","groupEnd","itmoAppl","code_id","getGUApplId","direction_code","checkKeys","genZeroAbit","zeroObj","phone","delo","abit_benefints","abit_financing","agreement_log","admc_error","skip_admc","skip_achievements","error_gu_search","attestat_error","main","contact","trim","abitConditions","onlyAch","is_have_achievements","Date","now","defaultConfig","limit","setConfig","useRun","fileName","setFileName","bachelors","setBachelors","useEffect","len","remove","validate","e","preventDefault","enable","max","newVal","target","value","Number","mergeJSONs","useCallback","disable","logs","genLog","genUpdateFunc","backs","total","splitedBacks","spliceIntoChunks","c","Math","round","toPromise","uno","then","localLogs","update","parseJSON","str","preresult","JSON","parse","prev","result","updateConfig","key","className","multiple","accept","onChange","event","loadFiles","setName","s","empty","check","handler","text","MultiSel","map","o","defOpt","SimpleSelect","setFunc","MakeBtn","p","func"],"sourceRoot":""}