{"version":3,"file":"static/js/639.6fe20133.chunk.js","mappings":"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","sources":["ts/fis.ts","pages/Fis2GU.tsx"],"sourcesContent":["import { IBaseFIO, IBaseLog, IConfig, ILogSubjectsCodeAbit, ILogSubjectsCodeGU, ISSPVOObj, RSS, subjectsCodeAll } from \"../models/common\";\r\nimport { Doc, IDocsAns } from \"../models/sspvo\";\r\nimport { getSubjectId } from \"./getBigFuncs\";\r\nimport { addLog, f, isNumber, makeForm, postDocs, getIdBySnilsOrFIO } from \"./utils\";\r\n\r\ninterface Iege {\r\n    [name: string]: {\r\n        year: number;\r\n        points: number;\r\n        valid: boolean;\r\n        region: number;\r\n    };\r\n}\r\n\r\ninterface FisAbit extends IBaseFIO {\r\n    series: string;\r\n    number: string;\r\n    ege: Iege;\r\n}\r\n\r\nexport interface FisAbits { [key: string]: FisAbit; }\r\n\r\nexport function convertFIS(data: string[][]): FisAbits | undefined {\r\n\r\n    const fisAbits: FisAbits = {};\r\n\r\n    for (const [i, fis] of data.filter(fis => fis.length > 10).entries()) {\r\n\r\n        let [surname, name, patronymic,\r\n            series, number,\r\n            subj, points, year, region, valid\r\n        ] = fis;\r\n\r\n        if (isNumber.non(surname, name, subj) && isNumber.only(year, points)) {\r\n\r\n            if (subj !== \"Сочинение\" && !subj.includes(\"устный\")) {\r\n\r\n                if (subj.includes(\"язык\") && subj !== \"Русский язык\") {\r\n                    // console.log(`${name} --> Иностранный язык`);\r\n                    subj = \"Иностранный язык - \" + subj.toLocaleLowerCase().split(\" \")[0];\r\n                }\r\n\r\n                if (series.length === 3) {\r\n                    series = `0${series}`;\r\n                }\r\n\r\n                const unicKey = surname + series + number;\r\n                const ege = { points: Number(points), year: Number(year), region: Number(region), valid: (valid === \"Действующий\") };\r\n\r\n                if (Object.hasOwn(fisAbits, unicKey)) {\r\n                    fisAbits[unicKey].ege[subj] = ege;\r\n                } else {\r\n                    fisAbits[unicKey] = {\r\n                        surname, name, patronymic,\r\n                        series, number,\r\n                        ege: { [subj]: ege }\r\n                    };\r\n                }\r\n            }\r\n        } else {\r\n            console.log(i, fis);\r\n            alert(`Строка ${i}\\nНекорректная выгрузка!\\n` +\r\n                \"Ожидалось [фамилия; имя; отчество; серия; номер; предмет; балл; год; регион; статус]\");\r\n            return;\r\n        }\r\n    };\r\n\r\n    return fisAbits;\r\n}\r\n\r\nexport interface ILogFIS extends IBaseLog, ILogSubjectsCodeAbit, ILogSubjectsCodeGU {\r\n    sspvo_id: number;\r\n    fis_series: string;\r\n    fis_number: string;\r\n    error_ege?: string;\r\n}\r\n\r\nfunction fillEgeLog(name: string, points: number, logObj: ILogFIS, isGU = false) {\r\n\r\n    let key = \"\" as subjectsCodeAll;\r\n\r\n    switch (name) {\r\n        case \"Русский язык\":\r\n            key = \"sum_r\";\r\n            break;\r\n        case \"Математика\":\r\n            key = \"sum_m\";\r\n            break;\r\n        case \"Информатика\":\r\n        case \"Информатика и ИКТ\":\r\n            key = \"sum_i\";\r\n            break;\r\n        case \"Физика\":\r\n            key = \"sum_p\";\r\n            break;\r\n        case \"Биология\":\r\n            key = \"sum_b\";\r\n            break;\r\n        case \"Обществознание\":\r\n            key = \"sum_o\";\r\n            break;\r\n        case \"Химия\":\r\n            key = \"sum_c\";\r\n            break;\r\n        case \"Иностранные языки\":\r\n        case \"Иностранный язык\":\r\n        case \"Иностранный язык - английский\":\r\n        case \"Иностранный язык - испанский\":\r\n        case \"Иностранный язык - китайский\":\r\n        case \"Иностранный язык - немецкий\":\r\n        case \"Иностранный язык - французский\":\r\n            key = \"sum_e\";\r\n            break;\r\n    }\r\n\r\n    if (key) {\r\n        logObj[(isGU ? \"gu_\" + key : key) as subjectsCodeAll] = points;\r\n    } else {\r\n        console.log(\"Не найден такой прдемет!\", name);\r\n    }\r\n}\r\n\r\nexport const useFIS = (config: IConfig, sa: RSS, ss: RSS) => {\r\n\r\n    const { get } = f;\r\n\r\n    async function checkFIS(abit: FisAbit): Promise<[number, ILogFIS]> {\r\n\r\n        const full_name = abit.surname + \" \" + abit.name + \" \" + abit.patronymic;\r\n        console.group(full_name);\r\n        sa(full_name);\r\n\r\n        const logObj: ILogFIS = {\r\n            sspvo_id: -1,\r\n            full_name: full_name,\r\n            snils: \"\",\r\n            surname: abit.surname,\r\n            name: abit.name,\r\n            patronymic: abit.patronymic,\r\n            gu_series: \"\",\r\n            gu_number: \"\",\r\n            fis_series: abit.series,\r\n            fis_number: abit.number,\r\n            passport_match: false,\r\n            sum_m: -1,\r\n            gu_sum_m: -1,\r\n            sum_r: -1,\r\n            gu_sum_r: -1,\r\n            sum_i: -1,\r\n            gu_sum_i: -1,\r\n            sum_p: -1,\r\n            gu_sum_p: -1,\r\n            sum_b: -1,\r\n            gu_sum_b: -1,\r\n            sum_c: -1,\r\n            gu_sum_c: -1,\r\n            sum_e: -1,\r\n            gu_sum_e: -1,\r\n            sum_o: -1,\r\n            gu_sum_o: -1,\r\n            error_gu_search: \"\",\r\n            error_passport: \"\",\r\n            error_ege: \"\"\r\n        };\r\n\r\n        const { sspvo_id, snils } = await getIdBySnilsOrFIO(logObj);\r\n\r\n        Object.entries(abit.ege).forEach(([name, { points }]) => fillEgeLog(name, points, logObj));\r\n\r\n        if (sspvo_id) {\r\n            logObj.sspvo_id = sspvo_id;\r\n            logObj.snils = snils;\r\n\r\n            ss(`Найден в базе ГУ ИТМО, id ${sspvo_id}`);\r\n\r\n            let sspvo: ISSPVOObj = {\r\n                passport: { exist: false, id: 0 },\r\n                attestat: { exist: false, id: 0, count: 0 },\r\n                ege: [],\r\n                egeFull: {}\r\n            };\r\n\r\n            const checkDoc = (doc: Doc) => {\r\n                switch (doc.id_document_type) {\r\n                    case 3:\r\n                        const exist = Object.hasOwn(sspvo.egeFull, doc.name_subject);\r\n                        ss(`Найден ЕГЭ: ${doc.name_subject}: ${doc.mark}`);\r\n                        if (!exist || (exist && doc.checked)) {\r\n                            sspvo.egeFull[doc.name_subject] = { id: doc.id, points: doc.mark || 0 };\r\n                            fillEgeLog(doc.name_subject, doc.mark || 0, logObj, true);\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                    case 40:\r\n                        if (!logObj.passport_match || doc.checked) {\r\n                            console.log(\"Найден Паспорт\");\r\n                            ss(`Найден Паспорт, id ${doc.id}`);\r\n                            sspvo.passport.id = doc.id;\r\n                            sspvo.passport.exist = true;\r\n                            logObj.gu_series = doc.doc_series || \"\";\r\n                            logObj.gu_number = doc.doc_number || \"\";\r\n                            logObj.passport_match = (logObj.gu_series === logObj.fis_series && logObj.gu_number === logObj.fis_number);\r\n                        }\r\n                        break;\r\n                }\r\n            };\r\n\r\n            const passportAns = await get<IDocsAns>(`/api/entrants/${sspvo_id}/docs/short?categories=identification`);\r\n            if (passportAns.done) {\r\n                if (passportAns.data.length === 0) {\r\n                    addLog(logObj, \"error_passport\", \"Нет документов\");\r\n                } else {\r\n                    passportAns.data[0]?.docs?.forEach(checkDoc);\r\n                }\r\n            }\r\n\r\n            const docsAns = await get<IDocsAns>(`/api/entrants/${sspvo_id}/docs/short?no_categories=identification`);\r\n            if (docsAns.done) {\r\n\r\n                if (docsAns.data.length === 0) {\r\n                    addLog(logObj, \"error_ege\", \"Нет Аттестата, нет ЕГЭ\");\r\n                } else {\r\n                    docsAns.data[0]?.docs?.forEach(checkDoc);\r\n                }\r\n            }\r\n\r\n            if (sspvo.passport.exist && config.addEge) {\r\n                console.log(\"Что то с егэ\");\r\n                for (const [exam, data] of Object.entries(abit.ege)) {\r\n                    if (!sspvo.ege.includes(exam)) {\r\n                        console.log(\"Добавление\", exam);\r\n                        let formData = makeForm({\r\n                            id_region: data.region,\r\n                            id_subject: getSubjectId(exam),\r\n                            mark: data.points,\r\n                            result_date: `${data.year}-07-20`,\r\n                            id_entrant: sspvo_id,\r\n                            id_document_type: 3,\r\n                            id_ident_document: sspvo.passport.id,\r\n                            issue_date: `${data.year}-07-20`,\r\n                            doc_version: 47,\r\n                            doc_org: \"ФИС\",\r\n                            uid: `fis_${sspvo_id}_education_ege_${getSubjectId(exam)}_abit8`,\r\n                            doc_name: \"Результат ЕГЭ\"\r\n                        });\r\n                        const ege_id = await postDocs(\"/api/docs/add\", formData);\r\n                        sspvo.egeFull[exam] = { id: ege_id, points: data.points };\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        console.groupEnd();\r\n        return [genUid(logObj), logObj];\r\n    }\r\n\r\n    const ZeroFIS = {\r\n        0: {\r\n            sspvo_id: \"id ГУ\",\r\n            full_name: \"ФИО\",\r\n            snils: \"снилс\",\r\n            surname: \"фамилия\",\r\n            name: \"имя\",\r\n            patronymic: \"отчество\",\r\n            gu_series: \"гу серия\",\r\n            gu_number: \"гу номер\",\r\n            fis_series: \"фис серия\",\r\n            fis_number: \"фис номер\",\r\n            passport_match: \"совпадает\",\r\n            sum_m: \"Математика\",\r\n            gu_sum_m: \"ГУ Математика\",\r\n            sum_r: \"Русский\",\r\n            gu_sum_r: \"ГУ Русский\",\r\n            sum_i: \"Информатика\",\r\n            gu_sum_i: \"ГУ Информатика\",\r\n            sum_p: \"Физика\",\r\n            gu_sum_p: \"ГУ Физика\",\r\n            sum_b: \"Биология\",\r\n            gu_sum_b: \"ГУ Биология\",\r\n            sum_c: \"Химия\",\r\n            gu_sum_c: \"ГУ Химия\",\r\n            sum_e: \"Иностранный\",\r\n            gu_sum_e: \"ГУ Иностранный\",\r\n            sum_o: \"Обществознание\",\r\n            gu_sum_o: \"ГУ Обществознание\",\r\n            error_gu_search: \"ошибка поиска на гу\",\r\n            error_passport: \"ошибка паспорта\",\r\n            error_ege: \"ошибка егэ\"\r\n        }\r\n    };\r\n\r\n    return { checkFIS, ZeroFIS };\r\n};\r\n\r\nfunction genUid(logObj: ILogFIS) {\r\n    const date = new Date();\r\n    return logObj.sspvo_id + Number(logObj.fis_number + logObj.fis_series) + date.getMilliseconds();\r\n}\r\n\r\nexport type ILogFullFis = { [key: number]: ILogFIS; };","import React, { useCallback, useState } from 'react';\r\nimport { genUpdateFunc, loadFiles, spliceIntoChunks } from \"../ts/utils\";\r\nimport { usePapaParse } from 'react-papaparse';\r\nimport { useFIS, convertFIS, FisAbits, ILogFullFis, ILogFIS } from \"../ts/fis\";\r\nimport { IConfig } from \"../models/common\";\r\nimport { MultiSelect, IMultiSelect } from \"../components/MultiSel\";\r\nimport { SSPVOCodeStatuses } from \"../models/sspvo\";\r\nimport useBtn from \"../hooks/btn.hook\";\r\nimport { CheckBox, SimpleSelect } from \"../components/SimpleSelect\";\r\nimport MakeBtn from \"../components/MakeBtn\";\r\nimport { ParseResult } from \"papaparse\";\r\n\r\nconst defaultConfig: IConfig = {\r\n    onlyAch: false,\r\n    addEge: false,\r\n    changeStatus: false,\r\n    searchInGUDB: false,\r\n    guStatuses: [\"in_competition\"],\r\n    guChecks: [\"agreement\", \"attestat\"],\r\n    abitConditions: [\"general_competition\", \"without_entry_tests\", \"by_unusual_quota\"]\r\n};\r\n\r\nconst Fis2GU: React.FC = () => {\r\n\r\n    const { readString } = usePapaParse();\r\n\r\n    const [fisAbits, setFisAbits] = useState<FisAbits>({});\r\n    const runBtn = useBtn(\"run\", \"RUN\");\r\n\r\n    const [currAbit, sa] = useState(\"\");\r\n    const [status, ss] = useState(\"\");\r\n    const [counter, sc] = useState(\"\");\r\n    const [saveAt, setSaveAt] = useState(50);\r\n    const [resize, setResize] = useState(5);\r\n    const [convert, setConvert] = useState(true);\r\n\r\n    const [config, setConfig] = useState(defaultConfig);\r\n    const { checkFIS, ZeroFIS } = useFIS(config, sa, ss);\r\n\r\n    const clear = () => {\r\n        runBtn.disable(false);\r\n        setFisAbits({});\r\n    };\r\n\r\n    const loadFilesFis = (event: React.ChangeEvent<HTMLInputElement>) => loadFiles(event, {\r\n        post: () => { },\r\n        then: (raw: string) => readString(raw, {\r\n            worker: true,\r\n            complete: (results: ParseResult<string[]>) => {\r\n                if (results.errors.length === 0) {\r\n                    const abits = convertFIS(results.data);\r\n                    if (abits) {\r\n                        setFisAbits(abits);\r\n                        runBtn.enable();\r\n                    } else {\r\n                        clear();\r\n                    }\r\n                } else {\r\n                    console.table(results.errors);\r\n                    alert(\"Неврный формат csv-файла!\\nСм. консоль\");\r\n                }\r\n            }\r\n        }),\r\n        empty: () => clear()\r\n    });\r\n\r\n    const start = useCallback(async () => {\r\n        sc(\"\");\r\n        runBtn.disable();\r\n        runBtn.remove();\r\n\r\n        const logs = ZeroFIS as unknown as ILogFullFis;\r\n        const genLog = genUpdateFunc(\"FisLog\", convert, resize);\r\n\r\n        const backs = Object.values(fisAbits);\r\n        const total = backs.length;\r\n        const splitedBacks = spliceIntoChunks(backs, resize);\r\n\r\n        let c = resize;\r\n\r\n        for (const abit of splitedBacks) {\r\n\r\n            if (c > total) { c = total; };\r\n            sc(`${Math.round(c / total * 10000) / 100}% (${c}/${total})`);\r\n\r\n            const toPromise: Promise<[number, ILogFIS]>[] = [];\r\n            abit.forEach(uno => toPromise.push(checkFIS(uno)));\r\n            await Promise.all(toPromise).then(localLogs => localLogs.forEach(([uid, log]) => logs[uid] = log));\r\n            if (c % saveAt === 0) { runBtn.update(genLog(c, logs)); }\r\n            c += resize;\r\n        }\r\n\r\n        runBtn.update(genLog(total, logs, true));\r\n        runBtn.enable();\r\n\r\n    }, [fisAbits, runBtn, resize, saveAt, convert, ZeroFIS, checkFIS]);\r\n\r\n    const mschandler = (e: IMultiSelect<SSPVOCodeStatuses>) => setConfig(prev => ({ ...prev, guStatuses: e.map(o => o.value) }));\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <input id=\"source\" type=\"file\" accept=\".csv\" onChange={loadFilesFis} />\r\n            <MultiSelect.GUStatuses handler={mschandler} defOpt={defaultConfig.guStatuses!} />\r\n            <SimpleSelect.Save value={saveAt} setFunc={setSaveAt} />\r\n            <SimpleSelect.Split value={resize} setFunc={setResize} />\r\n\r\n            <CheckBox id=\"toCSV\" check={convert} handler={e => setConvert(e.target.checked)} text=\"Конвертировать в CSV\" />\r\n            <MakeBtn p={runBtn.p} func={start} />\r\n            <p>Абитуриент: {currAbit}</p>\r\n            <p>Всего {counter}</p>\r\n            <p>{status}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Fis2GU;"],"names":["fillEgeLog","name","points","logObj","isGU","key","console","log","genUid","date","Date","sspvo_id","Number","fis_number","fis_series","getMilliseconds","defaultConfig","onlyAch","addEge","changeStatus","searchInGUDB","guStatuses","guChecks","abitConditions","readString","usePapaParse","useState","fisAbits","setFisAbits","runBtn","useBtn","currAbit","sa","status","ss","counter","sc","saveAt","setSaveAt","resize","setResize","convert","setConvert","config","setConfig","get","f","abit","full_name","surname","patronymic","group","snils","gu_series","gu_number","series","number","passport_match","sum_m","gu_sum_m","sum_r","gu_sum_r","sum_i","gu_sum_i","sum_p","gu_sum_p","sum_b","gu_sum_b","sum_c","gu_sum_c","sum_e","gu_sum_e","sum_o","gu_sum_o","error_gu_search","error_passport","error_ege","getIdBySnilsOrFIO","Object","entries","ege","forEach","sspvo","passport","exist","id","attestat","count","egeFull","checkDoc","doc","id_document_type","hasOwn","name_subject","mark","checked","doc_series","doc_number","passportAns","done","data","length","addLog","docs","docsAns","exam","includes","formData","makeForm","id_region","region","id_subject","getSubjectId","result_date","year","id_entrant","id_ident_document","issue_date","doc_version","doc_org","uid","doc_name","postDocs","ege_id","groupEnd","checkFIS","ZeroFIS","useFIS","clear","disable","start","useCallback","remove","logs","genLog","genUpdateFunc","backs","values","total","splitedBacks","spliceIntoChunks","c","Math","round","toPromise","uno","push","Promise","all","then","localLogs","update","enable","className","type","accept","onChange","event","loadFiles","post","raw","worker","complete","results","errors","abits","filter","fis","i","subj","valid","isNumber","alert","toLocaleLowerCase","split","unicKey","convertFIS","table","empty","MultiSel","handler","e","prev","map","o","value","defOpt","SimpleSelect","setFunc","check","target","text","MakeBtn","p","func"],"sourceRoot":""}