{"version":3,"file":"static/js/703.1d203beb.chunk.js","mappings":"iIA+FA,IAhFe,SAAC,GAMH,IALTA,EAKQ,EALRA,gBACAC,EAIQ,EAJRA,eAKA,GADQ,EAHRC,YAGQ,EAFRC,YAEQ,EADRC,MAEwBC,EAAAA,EAAAA,UAAS,KAAjC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAqBF,EAAAA,EAAAA,UAAS,IAA9B,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAsBJ,EAAAA,EAAAA,UAAS,IAA/B,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAA4BN,EAAAA,EAAAA,UAAS,IAArC,eAAOO,EAAP,KAAeC,EAAf,KACA,GAA4BR,EAAAA,EAAAA,UAAS,IAArC,eAAOS,EAAP,KAAeC,EAAf,KACA,GAA8BV,EAAAA,EAAAA,UAASJ,GAAvC,eAAOe,EAAP,KAAgBC,EAAhB,KAEA,GAA0BZ,EAAAA,EAAAA,UAAS,GAAnC,eAAOa,EAAP,KAAcC,EAAd,KACA,GAAsBd,EAAAA,EAAAA,UAAS,GAA/B,eAoDA,MAAO,CACHa,MAAAA,EAAOC,SAAAA,EACPC,IAtDJ,KAsDSC,OAtDT,KAuDIf,SAAAA,EAAUC,IAAAA,EACVC,OAAAA,EAAQC,GAAAA,EACRC,QAAAA,EAASC,GAAAA,EACTC,OAAAA,EAAQC,UAAAA,EACRC,OAAAA,EAAQC,UAAAA,EACRC,QAAAA,EAASC,WAAAA,EACTK,QA3DWC,EAAAA,EAAAA,GAAO,MAAO,MAAOvB,GA6DvC,C,sKClFKwB,EAAsC,CAAC,kBACvCC,EAA6B,CAC/BC,WAAW,EACXC,SAAS,EACTC,aAAa,EACbC,UAAU,EACVC,MAAO,IACPC,QAAS,GACTC,UAAW,KACXC,MAAO,GACPC,OAAQ,CAAC,OAAQ,SA8IrB,UA3I6B,WAEzB,OAA4B7B,EAAAA,EAAAA,UAASoB,GAArC,eAAOU,EAAP,KAAeC,EAAf,KACA,GAA0C/B,EAAAA,EAAAA,WAAS,GAAnD,eAAOgC,EAAP,KAAsBC,EAAtB,KAEA,GAQIC,EAAAA,EAAAA,GAAO,CACPtC,gBAAgB,EAChBD,iBAAiB,EACjBE,YAAasC,EAAAA,GACbpC,KAAM,QACND,YAAasC,EAAAA,KAZbnC,EADJ,EACIA,SAAUC,EADd,EACcA,IACVC,EAFJ,EAEIA,OAAQC,EAFZ,EAEYA,GACRC,EAHJ,EAGIA,QAASC,EAHb,EAGaA,GACTC,EAJJ,EAIIA,OAAQC,EAJZ,EAIYA,UACRC,EALJ,EAKIA,OAAQC,EALZ,EAKYA,UACRC,EANJ,EAMIA,QAASC,EANb,EAMaA,WACTK,EAPJ,EAOIA,QASJoB,EAAAA,EAAAA,YAAU,kBAAMN,GAAU,SAAAO,GAAI,yBACvBA,GADuB,IACjBZ,QAASP,EAAeoB,KAAI,SAAAC,GAAI,OAAIC,EAAAA,GAAAA,QAAsB,SAAAC,GAAC,OAAIA,EAAEF,OAASA,CAAf,IAAqBD,KAAI,SAAAG,GAAC,MAAI,kBAAoBA,EAAEC,EAA1B,GAArD,IAAoFC,KAAK,KADxG,GAApB,GAEL,CAACb,KAENM,EAAAA,EAAAA,YAAU,WACNQ,SAASC,MAAShB,EAAON,SAAY,mDAAa,yDAClDO,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBV,MAAQE,EAAON,SAAY,qBAAuB,IAAlE,GACjB,GAAE,CAACM,EAAON,SAAUO,IAErB,IAAMlB,GAAQkC,EAAAA,EAAAA,cAAW,uBAAC,oHACtBzC,EAAG,IACHW,EAAO+B,UACP/B,EAAOgC,SAEDC,GAAOf,EAAAA,EAAAA,IAAYL,GALH,UAOcqB,EAAAA,EAAAA,IAASrB,GAPvB,gBAOdsB,EAPc,EAOdA,MAAOC,EAPO,EAOPA,WACTC,GAAaC,EAAAA,EAAAA,IAAOF,GACpBG,GAAeC,EAAAA,EAAAA,IAAiBH,EAAY7C,GAE5CiD,GAASC,EAAAA,EAAAA,IAAc,UAAWhD,EAASF,EAAQqB,EAAON,UAE5DoC,EAAInD,EAASqB,EAAOL,MAbF,UAeF+B,GAfE,8HAeXK,EAfW,QAiBdD,EAAIR,IAASQ,EAAIR,GACrB9C,EAAG,GAAD,OAAIwD,KAAKC,MAAMH,EAAIR,EAAQ,KAAS,IAApC,cAA6CQ,EAA7C,YAAkDR,EAAlD,MAEIY,EAAkC,GACxCH,EAAMI,SAAQ,SAAAC,GAAI,OAAIF,EAAUG,MAAK/B,EAAAA,EAAAA,IAAc8B,EAAM,CAAEhE,IAAKA,EAAKE,GAAIA,EAAI0B,OAAAA,IAA3D,IArBA,SAsBZsC,QAAQC,IAAIL,GAAWM,MAAK,SAAAC,GAAS,OAAIA,EAAUC,OAAOP,SAAQ,SAAAvB,GAAC,OAAIQ,EAAKR,EAAE+B,SAAW/B,CAAtB,GAA9B,IAtBzB,OAuBdkB,EAAIrD,IAAW,GAAKU,EAAOyD,OAAOhB,EAAOE,EAAGV,IAEhDU,GAAKnD,EAASqB,EAAOL,MAzBH,gRA4BtBR,EAAOyD,OAAOhB,EAAON,EAAOF,GAAM,IAClCjC,EAAO0D,SA7Be,iEA+BvB,CAAC1D,EAAQa,EAAQrB,EAAQE,EAASJ,EAAQL,EAAKE,EAAIE,IAEhDsE,EAAe,SAACC,GAClB,IAAMlC,EAAKkC,EAAEC,OAAOnC,GACpBZ,GAAU,SAAAO,GAAI,+BACPA,GADO,mBAETK,GAAMb,EAAOa,KAFJ,iBAGFkC,EAAEC,OAAOC,QAAW,IAAMjD,EAAOL,OAH/B,MAKjB,EAwCD,OAZAY,EAAAA,EAAAA,YAAU,WACFP,EAAOT,YACPU,GAAU,SAAAO,GAAI,yBACPA,GADO,IAEVT,OAAQT,EAAcS,OACtBP,SAAS,EACTG,MAAO,IAJG,IAMdf,EAAU,GAEjB,GAAE,CAACoB,EAAOT,UAAWU,EAAWrB,KAG7B,iBAAKsE,UAAU,OAAf,WAEI,SAAC,KAAD,CAAUrC,GAAG,WAAWsC,MAAOnD,EAAON,SAAU0D,QAASN,EAAcO,KAAK,2FAE5E,SAAC,eAAD,CAAwBD,QAvCb,SAACL,GAChB9C,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBZ,QAASmD,EAAEtC,KAAI,SAAAG,GAAC,MAAI,kBAAoBA,EAAEC,EAA1B,IAA8BC,KAAK,KAAnE,GACjB,EAqCoDwC,OAAQjE,KAErD,SAAC,KAAD,CAAUwB,GAAG,gBAAgBsC,MAAOjD,EAAekD,QArC9B,SAACL,GACrBA,EAAEQ,cAAcN,SACjBhD,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBX,UAAW,MAA3B,IAElBM,GAAkBD,EACrB,EAgCyFmD,KAAK,wEACtFnD,IAAiB,SAAC,eAAD,CAAyBkD,QA/B1B,SAACL,GACtB9C,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBX,UAAWkD,EAAGS,OAA9B,GACjB,KA+BO,SAAC,KAAD,CAAU3C,GAAG,YAAYsC,MAAOnD,EAAOT,UAAW6D,QAASN,EAAcO,KAAK,0FAC7ErD,EAAOT,YAAa,SAAC,gBAAD,CAAyB6D,QA9B9B,SAACL,GACJ,IAAbA,EAAEU,QACFxD,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBjB,WAAW,GAA3B,IAElBU,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBT,OAAQgD,EAAEtC,KAAI,SAAAG,GAAC,OAAIA,EAAE4C,KAAN,KAA/B,GACjB,EAyB+EF,OAAQhE,EAAcS,UAE9F,SAAC,WAAD,CAAoByD,MAAOxD,EAAOL,MAAOyD,QAnD7B,SAACL,GACjB9C,GAAU,SAAAO,GAAI,yBAAUA,GAAV,IAAgBb,MAAO+D,OAAOX,EAAEC,OAAOQ,QAAvC,GACjB,KAkDO,SAAC,UAAD,CAAmBA,MAAO/E,EAAQkF,QAASjF,KAC3C,SAAC,WAAD,CAAoB8E,MAAO7E,EAAQgF,QAAS/E,KAE5C,SAAC,KAAD,CAAUiC,GAAG,UAAUsC,MAAOnD,EAAOR,QAAS4D,QAASN,EAAcO,KAAK,sGACzErD,EAAOR,UAAW,SAAC,KAAD,CAAUqB,GAAG,QAAQsC,MAAOtE,EAASuE,QAAS,kBAAMtE,GAAYD,EAAlB,EAA4BwE,KAAK,qGAElG,SAAC,IAAD,CAASO,EAAGzE,EAAOyE,EAAGC,KAAM9E,KAE5B,oFAAeZ,MACf,2DAAUI,MACV,8EAAcF,OAGzB,C","sources":["hooks/run.hook.ts","pages/GetAppls.tsx"],"sourcesContent":["import { useState } from \"react\";\r\n// import { useBeforeunload } from 'react-beforeunload';\r\n// import { IApplConfig } from \"../ts/applications\";\r\n// import { akt2json, genArr, log2csv, spliceIntoChunks } from \"../ts/utils\";\r\nimport useBtn from \"./btn.hook\";\r\n\r\n\r\ninterface IRun {\r\n    disabledDefault?: boolean;\r\n    convertDefault: boolean;\r\n    getZeroFunc: any;\r\n    type: \"pages\" | \"abits\";\r\n    handlerFunc: any;\r\n}\r\n\r\nconst useRun = ({\r\n    disabledDefault,\r\n    convertDefault,\r\n    getZeroFunc,\r\n    handlerFunc,\r\n    type\r\n}: IRun) => {\r\n    const [currAbit, sca] = useState(\"\");\r\n    const [status, ss] = useState(\"\");\r\n    const [counter, sc] = useState(\"\");\r\n    const [saveAt, setSaveAt] = useState(50);\r\n    const [resize, setResize] = useState(10);\r\n    const [convert, setConvert] = useState(convertDefault);\r\n\r\n    const [start, setStart] = useState(1);\r\n    const [end, setEnd] = useState(0);\r\n\r\n    const runBtn = useBtn(\"run\", \"RUN\", disabledDefault);\r\n\r\n    // const run = useCallback(async () => {\r\n    //     setCounter(\"\");\r\n    //     runBtn.disable();\r\n    //     runBtn.remove();\r\n\r\n    //     const logs = getZeroFunc(config) as L;\r\n\r\n    //     const fast = (resize === 1) ? \"\" : \"Fast\";\r\n\r\n    //     const { total, count_page } = await getPages(config);\r\n    //     const totalPages = genArr(count_page);\r\n    //     const splitedPages = spliceIntoChunks(totalPages, resize);\r\n\r\n    //     const limit = config.limit || 1;\r\n    //     let c = resize * limit;\r\n\r\n    //     for (const pages of splitedPages) {\r\n\r\n    //         if (c > total) c = total;\r\n    //         const p = Math.round(c / total * 10000) / 100;\r\n    //         setCounter(`${p}% (${c}/${total})`);\r\n\r\n    //         const toPromise: Promise<F>[] = [];\r\n    //         pages.forEach(page => toPromise.push(handlerFunc(page, { sca: setCurrAbit, ss: setStatus, config })));\r\n    //         await Promise.all(toPromise).then(localLogs => localLogs.flat().forEach(o => logs[o.id] = o));\r\n    //         if (c % saveAt === 0) {\r\n    //             runBtn.update(`${config.onlySogl ? \"\" : \"Full\"}ApplLog${c}.json`, akt2json(logs));\r\n    //         }\r\n\r\n    //         c += resize * limit;\r\n    //     }\r\n\r\n    //     const getBlob = (convert: boolean, logs: L) => {\r\n    //         if (convert) {\r\n    //             return [log2csv(logs), \"csv\"];\r\n    //         }\r\n    //         return [akt2json(logs), \"json\"];\r\n    //     };\r\n\r\n    //     const date = new Date();\r\n    //     const [data, ext] = (convert) ? [log2csv(logs), \"csv\"] : [akt2json(logs), \"json\"];\r\n    //     runBtn.update(`${config.onlySogl ? \"\" : \"Full\"}ApplLog${date.toISOString()}_${total}.${ext}`, data);\r\n    //     runBtn.enable();\r\n\r\n    // }, [runBtn, config, resize, convert, saveAt]);\r\n\r\n\r\n\r\n    return {\r\n        start, setStart,\r\n        end, setEnd,\r\n        currAbit, sca,\r\n        status, ss,\r\n        counter, sc,\r\n        saveAt, setSaveAt,\r\n        resize, setResize,\r\n        convert, setConvert,\r\n        runBtn\r\n    };\r\n};\r\n\r\nexport default useRun;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { ApplLog, applsChecks, checkAllAppls, genZeroAppl, getPages, IApplConfig, ILogAppFull } from \"../ts/applications\";\r\nimport { genArr, genUpdateFunc, spliceIntoChunks } from \"../ts/utils\";\r\nimport { sspvo_statuses } from \"../ts/getBigFuncs\";\r\nimport { CheckBox, SimpleSelect } from \"../components/SimpleSelect\";\r\nimport { MultiSelect, IMultiSelect } from \"../components/MultiSel\";\r\nimport { SingleSelect, ISingleSelect } from \"../components/MultiSel\";\r\nimport { SSPVOCodeStatuses } from \"../models/sspvo\";\r\nimport useRun from \"../hooks/run.hook\";\r\nimport MakeBtn from \"../components/MakeBtn\";\r\n\r\nconst defaultFilters: SSPVOCodeStatuses[] = [\"in_competition\"];\r\nconst defaultConfig: IApplConfig = {\r\n    fullCheck: false,\r\n    headers: false,\r\n    forceChange: false,\r\n    onlySogl: true,\r\n    limit: 100,\r\n    filters: \"\",\r\n    newStatus: null,\r\n    agree: \"\",\r\n    checks: [\"main\", \"sums\"]\r\n};\r\n\r\nconst CheckAppls: React.FC = () => {\r\n\r\n    const [config, setConfig] = useState(defaultConfig);\r\n    const [needNewStatus, setNeedNewStatus] = useState(false);\r\n\r\n    const {\r\n        currAbit, sca,\r\n        status, ss,\r\n        counter, sc,\r\n        saveAt, setSaveAt,\r\n        resize, setResize,\r\n        convert, setConvert,\r\n        runBtn\r\n    } = useRun({\r\n        convertDefault: false,\r\n        disabledDefault: false,\r\n        getZeroFunc: genZeroAppl,\r\n        type: \"pages\",\r\n        handlerFunc: checkAllAppls\r\n    });\r\n\r\n    useEffect(() => setConfig(prev => ({\r\n        ...prev, filters: defaultFilters.map(code => sspvo_statuses.filter(o => o.code === code).map(o => \"&filter_status=\" + o.id)).join(\"\"),\r\n    })), [setConfig]);\r\n\r\n    useEffect(() => {\r\n        document.title = (config.onlySogl) ? \"Согласия\" : \"Заявления\";\r\n        setConfig(prev => ({ ...prev, agree: (config.onlySogl) ? \"&filter_agree=true\" : \"\" }));\r\n    }, [config.onlySogl, setConfig]);\r\n\r\n    const start = useCallback(async () => {\r\n        sc(\"\");\r\n        runBtn.disable();\r\n        runBtn.remove();\r\n\r\n        const logs = genZeroAppl(config) as ILogAppFull;\r\n\r\n        const { total, count_page } = await getPages(config);\r\n        const totalPages = genArr(count_page);\r\n        const splitedPages = spliceIntoChunks(totalPages, resize);\r\n\r\n        const genLog = genUpdateFunc(\"ApplLog\", convert, resize, config.onlySogl);\r\n\r\n        let c = resize * config.limit;\r\n\r\n        for (const pages of splitedPages) {\r\n\r\n            if (c > total) { c = total; }\r\n            sc(`${Math.round(c / total * 10000) / 100}% (${c}/${total})`);\r\n\r\n            const toPromise: Promise<ApplLog[]>[] = [];\r\n            pages.forEach(page => toPromise.push(checkAllAppls(page, { sca: sca, ss: ss, config })));\r\n            await Promise.all(toPromise).then(localLogs => localLogs.flat().forEach(o => logs[o.appl_id] = o));\r\n            if (c % saveAt === 0) { runBtn.update(genLog(c, logs)); }\r\n\r\n            c += resize * config.limit;\r\n        }\r\n\r\n        runBtn.update(genLog(total, logs, true));\r\n        runBtn.enable();\r\n\r\n    }, [runBtn, config, resize, convert, saveAt, sca, ss, sc]);\r\n\r\n    const updateConfig = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const id = e.target.id as keyof IApplConfig;\r\n        setConfig(prev => ({\r\n            ...prev,\r\n            [id]: !config[id],\r\n            limit: (e.target.checked) ? 100 : config.limit\r\n        }));\r\n    };\r\n\r\n    const updateLimit = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setConfig(prev => ({ ...prev, limit: Number(e.target.value) }));\r\n    };\r\n\r\n    const mschandler = (e: IMultiSelect<SSPVOCodeStatuses>) => {\r\n        setConfig(prev => ({ ...prev, filters: e.map(o => \"&filter_status=\" + o.id).join(\"\") }));\r\n    };\r\n\r\n    const needNewStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (!e.currentTarget.checked) {\r\n            setConfig(prev => ({ ...prev, newStatus: null }));\r\n        }\r\n        setNeedNewStatus(!needNewStatus);\r\n    };\r\n\r\n    const newStatusHandler = (e: ISingleSelect<SSPVOCodeStatuses>) => {\r\n        setConfig(prev => ({ ...prev, newStatus: e!.value }));\r\n    };\r\n\r\n    const mschandlerAppls = (e: IMultiSelect<applsChecks>) => {\r\n        if (e.length === 0) {\r\n            setConfig(prev => ({ ...prev, fullCheck: false }));\r\n        }\r\n        setConfig(prev => ({ ...prev, checks: e.map(o => o.value) }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (config.fullCheck) {\r\n            setConfig(prev => ({\r\n                ...prev,\r\n                checks: defaultConfig.checks,\r\n                headers: true,\r\n                limit: 10\r\n            }));\r\n            setResize(1);\r\n        }\r\n    }, [config.fullCheck, setConfig, setResize]);\r\n\r\n    return (\r\n        <div className=\"main\">\r\n\r\n            <CheckBox id=\"onlySogl\" check={config.onlySogl} handler={updateConfig} text=\"Только Согласия\" />\r\n\r\n            <MultiSelect.GUStatuses handler={mschandler} defOpt={defaultFilters} />\r\n\r\n            <CheckBox id=\"needNewStatus\" check={needNewStatus} handler={needNewStatusHandler} text=\"Новый статус\" />\r\n            {needNewStatus && <SingleSelect.GUStatuses handler={newStatusHandler} />}\r\n\r\n            <CheckBox id=\"fullCheck\" check={config.fullCheck} handler={updateConfig} text=\"Полная выгрузка\" />\r\n            {config.fullCheck && <MultiSelect.ApplsChecks handler={mschandlerAppls} defOpt={defaultConfig.checks!} />}\r\n\r\n            <SimpleSelect.Limit value={config.limit} handler={updateLimit} />\r\n            <SimpleSelect.Save value={saveAt} setFunc={setSaveAt} />\r\n            <SimpleSelect.Split value={resize} setFunc={setResize} />\r\n\r\n            <CheckBox id=\"headers\" check={config.headers} handler={updateConfig} text=\"Названия столбцов\" />\r\n            {config.headers && <CheckBox id=\"toCSV\" check={convert} handler={() => setConvert(!convert)} text=\"Конвертировать в CSV\" />}\r\n\r\n            <MakeBtn p={runBtn.p} func={start} />\r\n\r\n            <p>Заявление: {currAbit}</p>\r\n            <p>Всего {counter}</p>\r\n            <p>Проверка: {status}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CheckAppls;"],"names":["disabledDefault","convertDefault","getZeroFunc","handlerFunc","type","useState","currAbit","sca","status","ss","counter","sc","saveAt","setSaveAt","resize","setResize","convert","setConvert","start","setStart","end","setEnd","runBtn","useBtn","defaultFilters","defaultConfig","fullCheck","headers","forceChange","onlySogl","limit","filters","newStatus","agree","checks","config","setConfig","needNewStatus","setNeedNewStatus","useRun","genZeroAppl","checkAllAppls","useEffect","prev","map","code","sspvo_statuses","o","id","join","document","title","useCallback","disable","remove","logs","getPages","total","count_page","totalPages","genArr","splitedPages","spliceIntoChunks","genLog","genUpdateFunc","c","pages","Math","round","toPromise","forEach","page","push","Promise","all","then","localLogs","flat","appl_id","update","enable","updateConfig","e","target","checked","className","check","handler","text","defOpt","currentTarget","value","length","Number","setFunc","p","func"],"sourceRoot":""}